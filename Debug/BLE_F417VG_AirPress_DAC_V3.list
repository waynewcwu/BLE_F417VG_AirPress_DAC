
BLE_F417VG_AirPress_DAC_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046fc  080046fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000080  08004774  00020080  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004774  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eca3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002290  00000000  00000000  0002ed43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00031d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221f3  00000000  00000000  00032a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efd8  00000000  00000000  00054c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7e0  00000000  00000000  00063beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001333cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  00133420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004554 	.word	0x08004554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08004554 	.word	0x08004554

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <BLE_USART>:

/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    switch(USARTBLE.Status)
 80005a0:	4b40      	ldr	r3, [pc, #256]	; (80006a4 <BLE_USART+0x10c>)
 80005a2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d067      	beq.n	800067a <BLE_USART+0xe2>
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	dc77      	bgt.n	800069e <BLE_USART+0x106>
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <BLE_USART+0x20>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d045      	beq.n	8000642 <BLE_USART+0xaa>
 80005b6:	e072      	b.n	800069e <BLE_USART+0x106>
    {

    	case Connecting:

    		if(USARTBLE.Rstflag==1)
 80005b8:	4b3a      	ldr	r3, [pc, #232]	; (80006a4 <BLE_USART+0x10c>)
 80005ba:	78db      	ldrb	r3, [r3, #3]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d004      	beq.n	80005ca <BLE_USART+0x32>
    		{
    			BLE_HD_RESET();//Reset BLE module
 80005c0:	f000 f9ec 	bl	800099c <BLE_HD_RESET>
    			USARTBLE.Rstflag=0;
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <BLE_USART+0x10c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	70da      	strb	r2, [r3, #3]
    		}
    		sprintf(USARTBLE.buffer, ConnectSlaveCMD);//Connect BLE module
 80005ca:	4937      	ldr	r1, [pc, #220]	; (80006a8 <BLE_USART+0x110>)
 80005cc:	4837      	ldr	r0, [pc, #220]	; (80006ac <BLE_USART+0x114>)
 80005ce:	f003 faf1 	bl	8003bb4 <siprintf>
    		USARTBLE.bufferSize = min(Uart_Biffer_Size, strlen(USARTBLE.buffer));
 80005d2:	4836      	ldr	r0, [pc, #216]	; (80006ac <BLE_USART+0x114>)
 80005d4:	f7ff fe06 	bl	80001e4 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b18      	cmp	r3, #24
 80005dc:	d804      	bhi.n	80005e8 <BLE_USART+0x50>
 80005de:	4833      	ldr	r0, [pc, #204]	; (80006ac <BLE_USART+0x114>)
 80005e0:	f7ff fe00 	bl	80001e4 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	e000      	b.n	80005ea <BLE_USART+0x52>
 80005e8:	2318      	movs	r3, #24
 80005ea:	4a2e      	ldr	r2, [pc, #184]	; (80006a4 <BLE_USART+0x10c>)
 80005ec:	66d3      	str	r3, [r2, #108]	; 0x6c
    		USARTBLE.sendTimeout = 10 ;
 80005ee:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <BLE_USART+0x10c>)
 80005f0:	220a      	movs	r2, #10
 80005f2:	665a      	str	r2, [r3, #100]	; 0x64
    				* @param huart   UART handle.
    				* @param pData   Pointer to data buffer.
    				* @param Size    Amount of data to be received.
    				* @param Timeout Timeout duration.(ms)
    				*/
    		if(USARTBLE.sendflag==1)//when time out then Reconnect
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <BLE_USART+0x10c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d04b      	beq.n	8000694 <BLE_USART+0xfc>
    		{
    			while(HAL_UART_Transmit(huart, &USARTBLE.buffer, USARTBLE.bufferSize, USARTBLE.sendTimeout )!=HAL_OK);
 80005fc:	bf00      	nop
 80005fe:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <BLE_USART+0x10c>)
 8000600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <BLE_USART+0x10c>)
 8000606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000608:	4928      	ldr	r1, [pc, #160]	; (80006ac <BLE_USART+0x114>)
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f002 fc81 	bl	8002f12 <HAL_UART_Transmit>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f3      	bne.n	80005fe <BLE_USART+0x66>
    			memset( USARTBLE.buffer, 0, strlen(USARTBLE.buffer) ); //clear transmit data
 8000616:	4825      	ldr	r0, [pc, #148]	; (80006ac <BLE_USART+0x114>)
 8000618:	f7ff fde4 	bl	80001e4 <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	4822      	ldr	r0, [pc, #136]	; (80006ac <BLE_USART+0x114>)
 8000624:	f003 fabe 	bl	8003ba4 <memset>
    			USARTBLE.Status = WaitConRsp;	//when send succeed wait BLE device
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <BLE_USART+0x10c>)
 800062a:	2201      	movs	r2, #1
 800062c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    			USARTBLE.sendflag = 0;
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <BLE_USART+0x10c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]

    		}
    		break;
 8000636:	e02d      	b.n	8000694 <BLE_USART+0xfc>

    	case WaitConRsp:
    		while(!USARTBLE.Revflag)
			{
    			if(Check_Con_Timeout()==ReConnect)
 8000638:	f000 f984 	bl	8000944 <Check_Con_Timeout>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d02a      	beq.n	8000698 <BLE_USART+0x100>
    		while(!USARTBLE.Revflag)
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <BLE_USART+0x10c>)
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f3      	bne.n	8000638 <BLE_USART+0xa0>
    				return;

    		}
    		Connect_Rep_Check();
 8000650:	f000 f8f2 	bl	8000838 <Connect_Rep_Check>
    		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fe91 	bl	800137c <HAL_Delay>
    		Send_ConSuccessed_ACK(huart);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9b8 	bl	80009d0 <Send_ConSuccessed_ACK>
    		USARTBLE.ConTimeOutflag = 0;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <BLE_USART+0x10c>)
 8000662:	2200      	movs	r2, #0
 8000664:	705a      	strb	r2, [r3, #1]
    		USARTBLE.Rev_Timeout_count = 0;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <BLE_USART+0x10c>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    		break;
 800066e:	e016      	b.n	800069e <BLE_USART+0x106>

    	case WaitRevData:
    	    while(!USARTBLE.Revflag)
    	    {
    	    	if(Check_Rev_Timeout()==ReConnect)
 8000670:	f000 f932 	bl	80008d8 <Check_Rev_Timeout>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d010      	beq.n	800069c <BLE_USART+0x104>
    	    while(!USARTBLE.Revflag)
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <BLE_USART+0x10c>)
 800067c:	789b      	ldrb	r3, [r3, #2]
 800067e:	f083 0301 	eor.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f3      	bne.n	8000670 <BLE_USART+0xd8>
    	    		return;
    	    }
    	    Get_SlaveDevice_Data();
 8000688:	f000 f812 	bl	80006b0 <Get_SlaveDevice_Data>
    	    Send_RevSuccessed_ACK(huart);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f9d1 	bl	8000a34 <Send_RevSuccessed_ACK>
    	    break;
 8000692:	e004      	b.n	800069e <BLE_USART+0x106>
    		break;
 8000694:	bf00      	nop
 8000696:	e002      	b.n	800069e <BLE_USART+0x106>
    				return;
 8000698:	bf00      	nop
 800069a:	e000      	b.n	800069e <BLE_USART+0x106>
    	    		return;
 800069c:	bf00      	nop
    }

}
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000c0 	.word	0x200000c0
 80006a8:	0800456c 	.word	0x0800456c
 80006ac:	200000e0 	.word	0x200000e0

080006b0 <Get_SlaveDevice_Data>:
void Get_SlaveDevice_Data(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	USARTBLE.Rev_Timeout_count=0; //reset receive timeout
 80006b6:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <Get_SlaveDevice_Data+0x170>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	//copy receive data to remp array
	memset( USARTBLE.RevTemp, 0, strlen(USARTBLE.RevTemp) ); //clear Receive data temp array
 80006be:	4859      	ldr	r0, [pc, #356]	; (8000824 <Get_SlaveDevice_Data+0x174>)
 80006c0:	f7ff fd90 	bl	80001e4 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	4856      	ldr	r0, [pc, #344]	; (8000824 <Get_SlaveDevice_Data+0x174>)
 80006cc:	f003 fa6a 	bl	8003ba4 <memset>
	USARTBLE.RevTempSize = strlen(USARTBLE.RevData)-2;
 80006d0:	4855      	ldr	r0, [pc, #340]	; (8000828 <Get_SlaveDevice_Data+0x178>)
 80006d2:	f7ff fd87 	bl	80001e4 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3b02      	subs	r3, #2
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b50      	ldr	r3, [pc, #320]	; (8000820 <Get_SlaveDevice_Data+0x170>)
 80006e0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	strncpy(USARTBLE.RevTemp, USARTBLE.RevData, USARTBLE.RevTempSize);
 80006e4:	4b4e      	ldr	r3, [pc, #312]	; (8000820 <Get_SlaveDevice_Data+0x170>)
 80006e6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80006ea:	461a      	mov	r2, r3
 80006ec:	494e      	ldr	r1, [pc, #312]	; (8000828 <Get_SlaveDevice_Data+0x178>)
 80006ee:	484d      	ldr	r0, [pc, #308]	; (8000824 <Get_SlaveDevice_Data+0x174>)
 80006f0:	f003 fa80 	bl	8003bf4 <strncpy>
	memset( USARTBLE.RevData, 0, strlen(USARTBLE.RevData) ); //clear Receive data
 80006f4:	484c      	ldr	r0, [pc, #304]	; (8000828 <Get_SlaveDevice_Data+0x178>)
 80006f6:	f7ff fd75 	bl	80001e4 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	4849      	ldr	r0, [pc, #292]	; (8000828 <Get_SlaveDevice_Data+0x178>)
 8000702:	f003 fa4f 	bl	8003ba4 <memset>
	USARTBLE.Revflag=0;
 8000706:	4b46      	ldr	r3, [pc, #280]	; (8000820 <Get_SlaveDevice_Data+0x170>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]
	//Separate data
	unsigned char byteCount=0, ArrayNo=0, ArrayByte=0;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	2300      	movs	r3, #0
 8000712:	71bb      	strb	r3, [r7, #6]
 8000714:	2300      	movs	r3, #0
 8000716:	717b      	strb	r3, [r7, #5]
	char SeparateStr[]=", ";
 8000718:	4a44      	ldr	r2, [pc, #272]	; (800082c <Get_SlaveDevice_Data+0x17c>)
 800071a:	463b      	mov	r3, r7
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	4611      	mov	r1, r2
 8000720:	8019      	strh	r1, [r3, #0]
 8000722:	3302      	adds	r3, #2
 8000724:	0c12      	lsrs	r2, r2, #16
 8000726:	701a      	strb	r2, [r3, #0]
	for(byteCount = 0; byteCount < USARTBLE.RevTempSize; byteCount++)
 8000728:	2300      	movs	r3, #0
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	e042      	b.n	80007b4 <Get_SlaveDevice_Data+0x104>
	{
		if(USARTBLE.RevTemp[byteCount] == SeparateStr[0] && USARTBLE.RevTemp[byteCount+1]==SeparateStr[1])
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4a3b      	ldr	r2, [pc, #236]	; (8000820 <Get_SlaveDevice_Data+0x170>)
 8000732:	4413      	add	r3, r2
 8000734:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8000738:	783b      	ldrb	r3, [r7, #0]
 800073a:	429a      	cmp	r2, r3
 800073c:	d110      	bne.n	8000760 <Get_SlaveDevice_Data+0xb0>
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	3301      	adds	r3, #1
 8000742:	4a37      	ldr	r2, [pc, #220]	; (8000820 <Get_SlaveDevice_Data+0x170>)
 8000744:	4413      	add	r3, r2
 8000746:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800074a:	787b      	ldrb	r3, [r7, #1]
 800074c:	429a      	cmp	r2, r3
 800074e:	d107      	bne.n	8000760 <Get_SlaveDevice_Data+0xb0>
		{
			ArrayNo++;
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	3301      	adds	r3, #1
 8000754:	71bb      	strb	r3, [r7, #6]
			byteCount+=2;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3302      	adds	r3, #2
 800075a:	71fb      	strb	r3, [r7, #7]
			ArrayByte = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	717b      	strb	r3, [r7, #5]
		}
		DAConv.DACDataStr[ArrayNo][ArrayByte] = USARTBLE.RevTemp[byteCount];
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	7979      	ldrb	r1, [r7, #5]
 8000766:	482e      	ldr	r0, [pc, #184]	; (8000820 <Get_SlaveDevice_Data+0x170>)
 8000768:	4403      	add	r3, r0
 800076a:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 800076e:	4830      	ldr	r0, [pc, #192]	; (8000830 <Get_SlaveDevice_Data+0x180>)
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4403      	add	r3, r0
 800077a:	440b      	add	r3, r1
 800077c:	3301      	adds	r3, #1
 800077e:	4622      	mov	r2, r4
 8000780:	701a      	strb	r2, [r3, #0]
		if(!isdigit(DAConv.DACDataStr[ArrayNo][ArrayByte]))
 8000782:	79ba      	ldrb	r2, [r7, #6]
 8000784:	7979      	ldrb	r1, [r7, #5]
 8000786:	482a      	ldr	r0, [pc, #168]	; (8000830 <Get_SlaveDevice_Data+0x180>)
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4403      	add	r3, r0
 8000792:	440b      	add	r3, r1
 8000794:	3301      	adds	r3, #1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a26      	ldr	r2, [pc, #152]	; (8000834 <Get_SlaveDevice_Data+0x184>)
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d036      	beq.n	8000816 <Get_SlaveDevice_Data+0x166>
			return;
		ArrayByte++;
 80007a8:	797b      	ldrb	r3, [r7, #5]
 80007aa:	3301      	adds	r3, #1
 80007ac:	717b      	strb	r3, [r7, #5]
	for(byteCount = 0; byteCount < USARTBLE.RevTempSize; byteCount++)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3301      	adds	r3, #1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <Get_SlaveDevice_Data+0x170>)
 80007b6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d3b6      	bcc.n	800072e <Get_SlaveDevice_Data+0x7e>
	}
	//convert string to integral
	for(ArrayNo = 0; ArrayNo <= 1 ;ArrayNo++) //2 DAC channel, arrayNo=0,1
 80007c0:	2300      	movs	r3, #0
 80007c2:	71bb      	strb	r3, [r7, #6]
 80007c4:	e023      	b.n	800080e <Get_SlaveDevice_Data+0x15e>
	{
		 DAConv.DACDataInt[ArrayNo] = atoi(DAConv.DACDataStr[ArrayNo]);
 80007c6:	79ba      	ldrb	r2, [r7, #6]
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <Get_SlaveDevice_Data+0x180>)
 80007d2:	4413      	add	r3, r2
 80007d4:	3301      	adds	r3, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f9b6 	bl	8003b48 <atoi>
 80007dc:	4602      	mov	r2, r0
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	b291      	uxth	r1, r2
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <Get_SlaveDevice_Data+0x180>)
 80007e4:	3308      	adds	r3, #8
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	460a      	mov	r2, r1
 80007ec:	80da      	strh	r2, [r3, #6]
		 memset(DAConv.DACDataStr[ArrayNo], 0, sizeof(DAConv.DACDataStr[ArrayNo])); //clear DAC data value
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <Get_SlaveDevice_Data+0x180>)
 80007fa:	4413      	add	r3, r2
 80007fc:	3301      	adds	r3, #1
 80007fe:	220a      	movs	r2, #10
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f003 f9ce 	bl	8003ba4 <memset>
	for(ArrayNo = 0; ArrayNo <= 1 ;ArrayNo++) //2 DAC channel, arrayNo=0,1
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	3301      	adds	r3, #1
 800080c:	71bb      	strb	r3, [r7, #6]
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d9d8      	bls.n	80007c6 <Get_SlaveDevice_Data+0x116>
 8000814:	e000      	b.n	8000818 <Get_SlaveDevice_Data+0x168>
			return;
 8000816:	bf00      	nop
	}

}
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	bf00      	nop
 8000820:	200000c0 	.word	0x200000c0
 8000824:	20000111 	.word	0x20000111
 8000828:	200000f9 	.word	0x200000f9
 800082c:	08004584 	.word	0x08004584
 8000830:	20000140 	.word	0x20000140
 8000834:	080045c0 	.word	0x080045c0

08000838 <Connect_Rep_Check>:

void Connect_Rep_Check(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	memset(USARTBLE.ConnCheck, 0, strlen(USARTBLE.ConnCheck) ); //clear connect response string
 800083e:	4821      	ldr	r0, [pc, #132]	; (80008c4 <Connect_Rep_Check+0x8c>)
 8000840:	f7ff fcd0 	bl	80001e4 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	481e      	ldr	r0, [pc, #120]	; (80008c4 <Connect_Rep_Check+0x8c>)
 800084c:	f003 f9aa 	bl	8003ba4 <memset>
	strncpy(USARTBLE.ConnCheck, USARTBLE.RevData, 5); //copy receive data at front 5 byte
 8000850:	2205      	movs	r2, #5
 8000852:	491d      	ldr	r1, [pc, #116]	; (80008c8 <Connect_Rep_Check+0x90>)
 8000854:	481b      	ldr	r0, [pc, #108]	; (80008c4 <Connect_Rep_Check+0x8c>)
 8000856:	f003 f9cd 	bl	8003bf4 <strncpy>
	char ConSucceed[]="+MTU:";
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <Connect_Rep_Check+0x94>)
 800085c:	463b      	mov	r3, r7
 800085e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000862:	6018      	str	r0, [r3, #0]
 8000864:	3304      	adds	r3, #4
 8000866:	8019      	strh	r1, [r3, #0]
	if(strcmp( USARTBLE.ConnCheck, ConSucceed ) == 0)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4815      	ldr	r0, [pc, #84]	; (80008c4 <Connect_Rep_Check+0x8c>)
 800086e:	f7ff fcaf 	bl	80001d0 <strcmp>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d110      	bne.n	800089a <Connect_Rep_Check+0x62>
	{
		HAL_GPIO_WritePin(RLED_Port, RLED, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <Connect_Rep_Check+0x98>)
 8000880:	f001 f9c8 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GLED_Port, GLED, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <Connect_Rep_Check+0x98>)
 800088c:	f001 f9c2 	bl	8001c14 <HAL_GPIO_WritePin>
		USARTBLE.Status = WaitRevData;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <Connect_Rep_Check+0x9c>)
 8000892:	2202      	movs	r2, #2
 8000894:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8000898:	e003      	b.n	80008a2 <Connect_Rep_Check+0x6a>
	}
	else
	{
		USARTBLE.Status = Connecting;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <Connect_Rep_Check+0x9c>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	}

	memset( USARTBLE.RevData, 0, strlen(USARTBLE.RevData) ); //clear Receive data
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <Connect_Rep_Check+0x90>)
 80008a4:	f7ff fc9e 	bl	80001e4 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <Connect_Rep_Check+0x90>)
 80008b0:	f003 f978 	bl	8003ba4 <memset>
	USARTBLE.Revflag=0;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <Connect_Rep_Check+0x9c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	709a      	strb	r2, [r3, #2]
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000011c 	.word	0x2000011c
 80008c8:	200000f9 	.word	0x200000f9
 80008cc:	08004588 	.word	0x08004588
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	200000c0 	.word	0x200000c0

080008d8 <Check_Rev_Timeout>:
          
Connect_StatusTypeDef Check_Rev_Timeout()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	if(USARTBLE.ConTimeOutflag)
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <Check_Rev_Timeout+0x64>)
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d028      	beq.n	8000936 <Check_Rev_Timeout+0x5e>
	{
	   USARTBLE.Rev_Timeout_count++;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <Check_Rev_Timeout+0x64>)
 80008e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80008ea:	3301      	adds	r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <Check_Rev_Timeout+0x64>)
 80008f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	   if(USARTBLE.Rev_Timeout_count==10)
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <Check_Rev_Timeout+0x64>)
 80008f6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80008fa:	2b0a      	cmp	r3, #10
 80008fc:	d118      	bne.n	8000930 <Check_Rev_Timeout+0x58>
	   {
		   USARTBLE.Rev_Timeout_count=0;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <Check_Rev_Timeout+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		   USARTBLE.Status = Connecting;	//When 5 second timeout that not receive any data, then turn to reconnct slave device.
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <Check_Rev_Timeout+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		   HAL_GPIO_WritePin(RLED_Port, RLED, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <Check_Rev_Timeout+0x68>)
 8000916:	f001 f97d 	bl	8001c14 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GLED_Port, GLED, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <Check_Rev_Timeout+0x68>)
 8000922:	f001 f977 	bl	8001c14 <HAL_GPIO_WritePin>
		   USARTBLE.Rstflag=1;//reset BLE module
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <Check_Rev_Timeout+0x64>)
 8000928:	2201      	movs	r2, #1
 800092a:	70da      	strb	r2, [r3, #3]
		   return ReConnect;
 800092c:	2301      	movs	r3, #1
 800092e:	e003      	b.n	8000938 <Check_Rev_Timeout+0x60>
	   }
	   USARTBLE.ConTimeOutflag=0;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <Check_Rev_Timeout+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	705a      	strb	r2, [r3, #1]
	}
	return NoTimeOut;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000c0 	.word	0x200000c0
 8000940:	40020c00 	.word	0x40020c00

08000944 <Check_Con_Timeout>:

Connect_StatusTypeDef Check_Con_Timeout()
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	if(USARTBLE.ConTimeOutflag)//if no receive data when time out then reconnect
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <Check_Con_Timeout+0x54>)
 800094a:	785b      	ldrb	r3, [r3, #1]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d01c      	beq.n	800098a <Check_Con_Timeout+0x46>
	{
		USARTBLE.Rev_Timeout_count++;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <Check_Con_Timeout+0x54>)
 8000952:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8000956:	3301      	adds	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <Check_Con_Timeout+0x54>)
 800095c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    	if(USARTBLE.Rev_Timeout_count==10)//count connect fail to 10 time, reset chip.
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <Check_Con_Timeout+0x54>)
 8000962:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8000966:	2b0a      	cmp	r3, #10
 8000968:	d106      	bne.n	8000978 <Check_Con_Timeout+0x34>
    	{
    		USARTBLE.Rstflag = 1;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <Check_Con_Timeout+0x54>)
 800096c:	2201      	movs	r2, #1
 800096e:	70da      	strb	r2, [r3, #3]
    		USARTBLE.Rev_Timeout_count = 0;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <Check_Con_Timeout+0x54>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    	}

    	USARTBLE.Status = Connecting;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <Check_Con_Timeout+0x54>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    	USARTBLE.ConTimeOutflag = 0;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <Check_Con_Timeout+0x54>)
 8000982:	2200      	movs	r2, #0
 8000984:	705a      	strb	r2, [r3, #1]
    	return ReConnect;
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <Check_Con_Timeout+0x48>
    }
    return NoTimeOut;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	200000c0 	.word	0x200000c0

0800099c <BLE_HD_RESET>:


void BLE_HD_RESET(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(Rst_Port, Rst, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2110      	movs	r1, #16
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <BLE_HD_RESET+0x30>)
 80009a6:	f001 f935 	bl	8001c14 <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 fce6 	bl	800137c <HAL_Delay>
	 HAL_GPIO_WritePin(Rst_Port, Rst, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2110      	movs	r1, #16
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <BLE_HD_RESET+0x30>)
 80009b6:	f001 f92d 	bl	8001c14 <HAL_GPIO_WritePin>
	 //wait 20ms for chip reset
	 HAL_Delay(20);
 80009ba:	2014      	movs	r0, #20
 80009bc:	f000 fcde 	bl	800137c <HAL_Delay>
	 //wait 10sec for slave connection ready.
	 HAL_Delay(10000);
 80009c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80009c4:	f000 fcda 	bl	800137c <HAL_Delay>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40020800 	.word	0x40020800

080009d0 <Send_ConSuccessed_ACK>:
  	//set reset flag to low level
	USARTBLE.Rstflag = 0;
}

void Send_ConSuccessed_ACK(UART_HandleTypeDef *huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	//send ACK for Connect succeed
   	sprintf(USARTBLE.buffer, "ConACK\r\n");
 80009d8:	4913      	ldr	r1, [pc, #76]	; (8000a28 <Send_ConSuccessed_ACK+0x58>)
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <Send_ConSuccessed_ACK+0x5c>)
 80009dc:	f003 f8ea 	bl	8003bb4 <siprintf>
   	USARTBLE.bufferSize = min(Uart_Biffer_Size, strlen(USARTBLE.buffer));
 80009e0:	4812      	ldr	r0, [pc, #72]	; (8000a2c <Send_ConSuccessed_ACK+0x5c>)
 80009e2:	f7ff fbff 	bl	80001e4 <strlen>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b18      	cmp	r3, #24
 80009ea:	d804      	bhi.n	80009f6 <Send_ConSuccessed_ACK+0x26>
 80009ec:	480f      	ldr	r0, [pc, #60]	; (8000a2c <Send_ConSuccessed_ACK+0x5c>)
 80009ee:	f7ff fbf9 	bl	80001e4 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	e000      	b.n	80009f8 <Send_ConSuccessed_ACK+0x28>
 80009f6:	2318      	movs	r3, #24
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <Send_ConSuccessed_ACK+0x60>)
 80009fa:	66d3      	str	r3, [r2, #108]	; 0x6c
    HAL_UART_Transmit(huart, &USARTBLE.buffer, USARTBLE.bufferSize, USARTBLE.sendTimeout );
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <Send_ConSuccessed_ACK+0x60>)
 80009fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <Send_ConSuccessed_ACK+0x60>)
 8000a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a06:	4909      	ldr	r1, [pc, #36]	; (8000a2c <Send_ConSuccessed_ACK+0x5c>)
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f002 fa82 	bl	8002f12 <HAL_UART_Transmit>
    memset( USARTBLE.buffer, 0, strlen(USARTBLE.buffer) ); //clear transmit data
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <Send_ConSuccessed_ACK+0x5c>)
 8000a10:	f7ff fbe8 	bl	80001e4 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <Send_ConSuccessed_ACK+0x5c>)
 8000a1c:	f003 f8c2 	bl	8003ba4 <memset>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	08004590 	.word	0x08004590
 8000a2c:	200000e0 	.word	0x200000e0
 8000a30:	200000c0 	.word	0x200000c0

08000a34 <Send_RevSuccessed_ACK>:
void Send_RevSuccessed_ACK(UART_HandleTypeDef *huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	//send ACK for receive succeed
	sprintf(USARTBLE.buffer, "RevACK\r\n");
 8000a3c:	4913      	ldr	r1, [pc, #76]	; (8000a8c <Send_RevSuccessed_ACK+0x58>)
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <Send_RevSuccessed_ACK+0x5c>)
 8000a40:	f003 f8b8 	bl	8003bb4 <siprintf>
	USARTBLE.bufferSize = min(Uart_Biffer_Size, strlen(USARTBLE.buffer));
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <Send_RevSuccessed_ACK+0x5c>)
 8000a46:	f7ff fbcd 	bl	80001e4 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b18      	cmp	r3, #24
 8000a4e:	d804      	bhi.n	8000a5a <Send_RevSuccessed_ACK+0x26>
 8000a50:	480f      	ldr	r0, [pc, #60]	; (8000a90 <Send_RevSuccessed_ACK+0x5c>)
 8000a52:	f7ff fbc7 	bl	80001e4 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	e000      	b.n	8000a5c <Send_RevSuccessed_ACK+0x28>
 8000a5a:	2318      	movs	r3, #24
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <Send_RevSuccessed_ACK+0x60>)
 8000a5e:	66d3      	str	r3, [r2, #108]	; 0x6c
	HAL_UART_Transmit(huart, &USARTBLE.buffer, USARTBLE.bufferSize, USARTBLE.sendTimeout );
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <Send_RevSuccessed_ACK+0x60>)
 8000a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <Send_RevSuccessed_ACK+0x60>)
 8000a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a6a:	4909      	ldr	r1, [pc, #36]	; (8000a90 <Send_RevSuccessed_ACK+0x5c>)
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f002 fa50 	bl	8002f12 <HAL_UART_Transmit>
	memset( USARTBLE.buffer, 0, strlen(USARTBLE.buffer) ); //clear transmit data
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <Send_RevSuccessed_ACK+0x5c>)
 8000a74:	f7ff fbb6 	bl	80001e4 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <Send_RevSuccessed_ACK+0x5c>)
 8000a80:	f003 f890 	bl	8003ba4 <memset>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0800459c 	.word	0x0800459c
 8000a90:	200000e0 	.word	0x200000e0
 8000a94:	200000c0 	.word	0x200000c0

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f000 fbfc 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f84e 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 f982 	bl	8000dac <MX_GPIO_Init>
  MX_DAC_Init();
 8000aa8:	f000 f8b6 	bl	8000c18 <MX_DAC_Init>
  MX_TIM2_Init();
 8000aac:	f000 f902 	bl	8000cb4 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000ab0:	f000 f952 	bl	8000d58 <MX_USART6_UART_Init>
  MX_IWDG_Init();
 8000ab4:	f000 f8e4 	bl	8000c80 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(RLED_Port, RLED, GPIO_PIN_SET); //set LED3 for connecting
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <main+0x88>)
 8000ac0:	f001 f8a8 	bl	8001c14 <HAL_GPIO_WritePin>
  //TODO:--Wayne2021017
  HAL_TIM_Base_Start_IT(&htim2);//UART TIM
 8000ac4:	4817      	ldr	r0, [pc, #92]	; (8000b24 <main+0x8c>)
 8000ac6:	f001 fda9 	bl	800261c <HAL_TIM_Base_Start_IT>
   /*##- Enable DAC Channel1 ################################################*/
  //Start DAC
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000aca:	2100      	movs	r1, #0
 8000acc:	4816      	ldr	r0, [pc, #88]	; (8000b28 <main+0x90>)
 8000ace:	f000 fdac 	bl	800162a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <main+0x90>)
 8000ad6:	f000 fda8 	bl	800162a <HAL_DAC_Start>
//  BLE_Status_Init(&huart6);
  USARTBLE.Status = Connecting;	//init BLE Status
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <main+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  //initial LoRa receive interrupt flag
  while(HAL_UART_Receive_IT(&huart6 ,&USARTBLE.Rbuffer,1)!=HAL_OK);
 8000ae2:	bf00      	nop
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4912      	ldr	r1, [pc, #72]	; (8000b30 <main+0x98>)
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <main+0x9c>)
 8000aea:	f002 faa4 	bl	8003036 <HAL_UART_Receive_IT>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f7      	bne.n	8000ae4 <main+0x4c>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //TODO:--Wayne2021017
     BLE_USART(&huart6);
 8000af4:	480f      	ldr	r0, [pc, #60]	; (8000b34 <main+0x9c>)
 8000af6:	f7ff fd4f 	bl	8000598 <BLE_USART>
     /*##-1- Set DAC channel1 DHR12RD register ################################################*/
	 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAConv.DACDataInt[0]);
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <main+0xa0>)
 8000afc:	8adb      	ldrh	r3, [r3, #22]
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <main+0x90>)
 8000b04:	f000 fde3 	bl	80016ce <HAL_DAC_SetValue>
	 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, DAConv.DACDataInt[1]);
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <main+0xa0>)
 8000b0a:	8b1b      	ldrh	r3, [r3, #24]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <main+0x90>)
 8000b12:	f000 fddc 	bl	80016ce <HAL_DAC_SetValue>
	 //IWDG_Refresh, reload:15sec
	 HAL_IWDG_Refresh(&hiwdg);
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <main+0xa4>)
 8000b18:	f001 f8d7 	bl	8001cca <HAL_IWDG_Refresh>
     BLE_USART(&huart6);
 8000b1c:	e7ea      	b.n	8000af4 <main+0x5c>
 8000b1e:	bf00      	nop
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	200001c0 	.word	0x200001c0
 8000b28:	20000168 	.word	0x20000168
 8000b2c:	200000c0 	.word	0x200000c0
 8000b30:	200000f8 	.word	0x200000f8
 8000b34:	2000017c 	.word	0x2000017c
 8000b38:	20000140 	.word	0x20000140
 8000b3c:	2000015c 	.word	0x2000015c

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	; 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 f828 	bl	8003ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a28      	ldr	r2, [pc, #160]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <SystemClock_Config+0xd4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <SystemClock_Config+0xd4>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <SystemClock_Config+0xd4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bb8:	23a8      	movs	r3, #168	; 0xa8
 8000bba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 f88f 	bl	8001cec <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bd4:	f000 f9c8 	bl	8000f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 faf0 	bl	80021dc <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c02:	f000 f9b1 	bl	8000f68 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	; 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_DAC_Init+0x60>)
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <MX_DAC_Init+0x64>)
 8000c2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c2c:	4812      	ldr	r0, [pc, #72]	; (8000c78 <MX_DAC_Init+0x60>)
 8000c2e:	f000 fcda 	bl	80015e6 <HAL_DAC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c38:	f000 f996 	bl	8000f68 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_DAC_Init+0x60>)
 8000c4c:	f000 fd64 	bl	8001718 <HAL_DAC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c56:	f000 f987 	bl	8000f68 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_DAC_Init+0x60>)
 8000c62:	f000 fd59 	bl	8001718 <HAL_DAC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000c6c:	f000 f97c 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000168 	.word	0x20000168
 8000c7c:	40007400 	.word	0x40007400

08000c80 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_IWDG_Init+0x2c>)
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <MX_IWDG_Init+0x30>)
 8000c88:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_IWDG_Init+0x2c>)
 8000c8c:	2205      	movs	r2, #5
 8000c8e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3750;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_IWDG_Init+0x2c>)
 8000c92:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000c96:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_IWDG_Init+0x2c>)
 8000c9a:	f000 ffd4 	bl	8001c46 <HAL_IWDG_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000ca4:	f000 f960 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000015c 	.word	0x2000015c
 8000cb0:	40003000 	.word	0x40003000

08000cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000cda:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000ce8:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfa:	4816      	ldr	r0, [pc, #88]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000cfc:	f001 fc3e 	bl	800257c <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d06:	f000 f92f 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	4619      	mov	r1, r3
 8000d16:	480f      	ldr	r0, [pc, #60]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000d18:	f001 fdf8 	bl	800290c <HAL_TIM_ConfigClockSource>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d22:	f000 f921 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000d34:	f002 f810 	bl	8002d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d3e:	f000 f913 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);//clear timer flag to reload count
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <MX_TIM2_Init+0xa0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f06f 0201 	mvn.w	r2, #1
 8000d4a:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200001c0 	.word	0x200001c0

08000d58 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <MX_USART6_UART_Init+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_USART6_UART_Init+0x4c>)
 8000d90:	f002 f872 	bl	8002e78 <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d9a:	f000 f8e5 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000017c 	.word	0x2000017c
 8000da8:	40011400 	.word	0x40011400

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a2b      	ldr	r2, [pc, #172]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a24      	ldr	r2, [pc, #144]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_GPIO_Init+0xe8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	21c0      	movs	r1, #192	; 0xc0
 8000e1a:	481f      	ldr	r0, [pc, #124]	; (8000e98 <MX_GPIO_Init+0xec>)
 8000e1c:	f000 fefa 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2110      	movs	r1, #16
 8000e24:	481d      	ldr	r0, [pc, #116]	; (8000e9c <MX_GPIO_Init+0xf0>)
 8000e26:	f000 fef5 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e30:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0xf4>)
 8000e32:	f000 feef 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e36:	23c0      	movs	r3, #192	; 0xc0
 8000e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4812      	ldr	r0, [pc, #72]	; (8000e98 <MX_GPIO_Init+0xec>)
 8000e4e:	f000 fd45 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e52:	2310      	movs	r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_GPIO_Init+0xf0>)
 8000e6a:	f000 fd37 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_GPIO_Init+0xf4>)
 8000e88:	f000 fd28 	bl	80018dc <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020c00 	.word	0x40020c00

08000ea4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//TODO:--Wayne2021017
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//--Wayne20200130
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == htim2.Instance) //per 500ms
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d105      	bne.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x20>
	 {
		 USARTBLE.sendflag = 1;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
		 USARTBLE.ConTimeOutflag = 1;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	705a      	strb	r2, [r3, #1]
	 }
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	200001c0 	.word	0x200001c0
 8000ed4:	200000c0 	.word	0x200000c0

08000ed8 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart6);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  USARTBLE.RevData[USARTBLE.RxCount++]= USARTBLE.Rbuffer;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000ee2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	b2d1      	uxtb	r1, r2
 8000eea:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000eec:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000ef4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  if(USARTBLE.Rbuffer==0x0A)
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000f02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	d106      	bne.n	8000f18 <HAL_UART_RxCpltCallback+0x40>
  	{
	  USARTBLE.Revflag = 1;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	709a      	strb	r2, [r3, #2]
	  USARTBLE.RxCount=0;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  	}
  	if(USARTBLE.RxCount>=24)
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000f1a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000f1e:	2b17      	cmp	r3, #23
 8000f20:	d90c      	bls.n	8000f3c <HAL_UART_RxCpltCallback+0x64>
  	{
  		USARTBLE.RxCount=0;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  		memset( USARTBLE.RevData, 0, strlen(USARTBLE.RevData) ); //clear Receive data
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <HAL_UART_RxCpltCallback+0x84>)
 8000f2c:	f7ff f95a 	bl	80001e4 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <HAL_UART_RxCpltCallback+0x84>)
 8000f38:	f002 fe34 	bl	8003ba4 <memset>
  	}

  while(HAL_UART_Receive_IT(&huart6,&USARTBLE.Rbuffer,1)!=HAL_OK);
 8000f3c:	bf00      	nop
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <HAL_UART_RxCpltCallback+0x88>)
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <HAL_UART_RxCpltCallback+0x8c>)
 8000f44:	f002 f877 	bl	8003036 <HAL_UART_Receive_IT>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f7      	bne.n	8000f3e <HAL_UART_RxCpltCallback+0x66>
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000c0 	.word	0x200000c0
 8000f5c:	200000f9 	.word	0x200000f9
 8000f60:	200000f8 	.word	0x200000f8
 8000f64:	2000017c 	.word	0x2000017c

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_DAC_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d127      	bne.n	800103a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_DAC_MspInit+0x80>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <HAL_DAC_MspInit+0x80>)
 8000ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_DAC_MspInit+0x80>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_DAC_MspInit+0x80>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_DAC_MspInit+0x80>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_DAC_MspInit+0x80>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001022:	2330      	movs	r3, #48	; 0x30
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_DAC_MspInit+0x84>)
 8001036:	f000 fc51 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40007400 	.word	0x40007400
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001060:	d115      	bne.n	800108e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_TIM_Base_MspInit+0x48>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_TIM_Base_MspInit+0x48>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_TIM_Base_MspInit+0x48>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	201c      	movs	r0, #28
 8001084:	f000 fa79 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001088:	201c      	movs	r0, #28
 800108a:	f000 fa92 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_UART_MspInit+0x94>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d133      	bne.n	8001126 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f003 0320 	and.w	r3, r3, #32
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f6:	23c0      	movs	r3, #192	; 0xc0
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001106:	2308      	movs	r3, #8
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_UART_MspInit+0x9c>)
 8001112:	f000 fbe3 	bl	80018dc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2047      	movs	r0, #71	; 0x47
 800111c:	f000 fa2d 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001120:	2047      	movs	r0, #71	; 0x47
 8001122:	f000 fa46 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40011400 	.word	0x40011400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020800 	.word	0x40020800

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f8d4 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <TIM2_IRQHandler+0x10>)
 800119e:	f001 faad 	bl	80026fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001c0 	.word	0x200001c0

080011ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <USART6_IRQHandler+0x10>)
 80011b2:	f001 ff71 	bl	8003098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000017c 	.word	0x2000017c

080011c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x50>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x16>
		heap_end = &end;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <_sbrk+0x50>)
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <_sbrk+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <_sbrk+0x50>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <_sbrk+0x50>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	466a      	mov	r2, sp
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d907      	bls.n	80011fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ea:	f002 fcb1 	bl	8003b50 <__errno>
 80011ee:	4603      	mov	r3, r0
 80011f0:	220c      	movs	r2, #12
 80011f2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	e006      	b.n	8001208 <_sbrk+0x48>
	}

	heap_end += incr;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <_sbrk+0x50>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a03      	ldr	r2, [pc, #12]	; (8001210 <_sbrk+0x50>)
 8001204:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000009c 	.word	0x2000009c
 8001214:	20000220 	.word	0x20000220

08001218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <SystemInit+0x28>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a07      	ldr	r2, [pc, #28]	; (8001240 <SystemInit+0x28>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SystemInit+0x28>)
 800122e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001232:	609a      	str	r2, [r3, #8]
#endif
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800124a:	e003      	b.n	8001254 <LoopCopyDataInit>

0800124c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800124e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001252:	3104      	adds	r1, #4

08001254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800125a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800125c:	d3f6      	bcc.n	800124c <CopyDataInit>
  ldr  r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001260:	e002      	b.n	8001268 <LoopFillZerobss>

08001262 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001262:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001264:	f842 3b04 	str.w	r3, [r2], #4

08001268 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800126a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800126c:	d3f9      	bcc.n	8001262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800126e:	f7ff ffd3 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f002 fc73 	bl	8003b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff fc0f 	bl	8000a98 <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800127c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001280:	08004704 	.word	0x08004704
  ldr  r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001288:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800128c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001290:	2000021c 	.word	0x2000021c

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f94f 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fe54 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f967 	bl	80015ce <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f92f 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	20000208 	.word	0x20000208

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000208 	.word	0x20000208

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff3e 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff31 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffa2 	bl	8001520 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e014      	b.n	8001622 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d105      	bne.n	800160e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fcdd 	bl	8000fc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2202      	movs	r2, #2
 8001612:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	795b      	ldrb	r3, [r3, #5]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_DAC_Start+0x16>
 800163c:	2302      	movs	r3, #2
 800163e:	e040      	b.n	80016c2 <HAL_DAC_Start+0x98>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2201      	movs	r2, #1
 800165a:	409a      	lsls	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001674:	2b3c      	cmp	r3, #60	; 0x3c
 8001676:	d11d      	bne.n	80016b4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	e014      	b.n	80016b4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	213c      	movs	r1, #60	; 0x3c
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0202 	orr.w	r2, r2, #2
 80016b2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b087      	sub	sp, #28
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	3308      	adds	r3, #8
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e004      	b.n	8001702 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	3314      	adds	r3, #20
 8001700:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	461a      	mov	r2, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	795b      	ldrb	r3, [r3, #5]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_DAC_ConfigChannel+0x18>
 800172c:	2302      	movs	r3, #2
 800172e:	e03c      	b.n	80017aa <HAL_DAC_ConfigChannel+0x92>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2202      	movs	r2, #2
 800173a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4013      	ands	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	22c0      	movs	r2, #192	; 0xc0
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	400a      	ands	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fdce 	bl	8001364 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d008      	beq.n	80017e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e052      	b.n	800188e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0216 	bic.w	r2, r2, #22
 80017f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001806:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d103      	bne.n	8001818 <HAL_DMA_Abort+0x62>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	2b00      	cmp	r3, #0
 8001816:	d007      	beq.n	8001828 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0208 	bic.w	r2, r2, #8
 8001826:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001838:	e013      	b.n	8001862 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183a:	f7ff fd93 	bl	8001364 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b05      	cmp	r3, #5
 8001846:	d90c      	bls.n	8001862 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2220      	movs	r2, #32
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e015      	b.n	800188e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1e4      	bne.n	800183a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	223f      	movs	r2, #63	; 0x3f
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d004      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e00c      	b.n	80018ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2205      	movs	r2, #5
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e16b      	b.n	8001bd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 815a 	bne.w	8001bca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80b4 	beq.w	8001bca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a5b      	ldr	r2, [pc, #364]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	; (8001bf0 <HAL_GPIO_Init+0x314>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d02b      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <HAL_GPIO_Init+0x318>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d025      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a50      	ldr	r2, [pc, #320]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01f      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4f      	ldr	r2, [pc, #316]	; (8001bfc <HAL_GPIO_Init+0x320>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4e      	ldr	r2, [pc, #312]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x216>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4d      	ldr	r2, [pc, #308]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x212>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <HAL_GPIO_Init+0x32c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x20a>
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	e00e      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001aea:	2306      	movs	r3, #6
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b46:	4a32      	ldr	r2, [pc, #200]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b70:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f ae90 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40021400 	.word	0x40021400
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40021c00 	.word	0x40021c00
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e034      	b.n	8001cc2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001c60:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f245 5255 	movw	r2, #21845	; 0x5555
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6852      	ldr	r2, [r2, #4]
 8001c74:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6892      	ldr	r2, [r2, #8]
 8001c7e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001c80:	f7ff fb70 	bl	8001364 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001c86:	e00f      	b.n	8001ca8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001c88:	f7ff fb6c 	bl	8001364 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b30      	cmp	r3, #48	; 0x30
 8001c94:	d908      	bls.n	8001ca8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e00c      	b.n	8001cc2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e8      	bne.n	8001c88 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e264      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d075      	beq.n	8001df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0a:	4ba3      	ldr	r3, [pc, #652]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d00c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4ba0      	ldr	r3, [pc, #640]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d112      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b9d      	ldr	r3, [pc, #628]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	4b99      	ldr	r3, [pc, #612]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d05b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x108>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d157      	bne.n	8001df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e23f      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x74>
 8001d52:	4b91      	ldr	r3, [pc, #580]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a90      	ldr	r2, [pc, #576]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x98>
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a8a      	ldr	r2, [pc, #552]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d84:	4b84      	ldr	r3, [pc, #528]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a83      	ldr	r2, [pc, #524]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a80      	ldr	r2, [pc, #512]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fade 	bl	8001364 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fada 	bl	8001364 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e204      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xc0>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff faca 	bl	8001364 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fac6 	bl	8001364 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1f0      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xe8>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x152>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1c4      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4952      	ldr	r1, [pc, #328]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <HAL_RCC_OscConfig+0x2b0>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff fa7f 	bl	8001364 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fa7b 	bl	8001364 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1a5      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4940      	ldr	r1, [pc, #256]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x2b0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fa5e 	bl	8001364 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff fa5a 	bl	8001364 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e184      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d030      	beq.n	8001f38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCC_OscConfig+0x2b4>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fa3e 	bl	8001364 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fa3a 	bl	8001364 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e164      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x200>
 8001f0a:	e015      	b.n	8001f38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_OscConfig+0x2b4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fa27 	bl	8001364 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fa23 	bl	8001364 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e14d      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a0 	beq.w	8002086 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d121      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f9e9 	bl	8001364 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	e011      	b.n	8001fba <HAL_RCC_OscConfig+0x2ce>
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
 8001fa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa8:	f7ff f9dc 	bl	8001364 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e106      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b85      	ldr	r3, [pc, #532]	; (80021d0 <HAL_RCC_OscConfig+0x4e4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
 8001fce:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a80      	ldr	r2, [pc, #512]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	e01c      	b.n	8002016 <HAL_RCC_OscConfig+0x32a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4a7a      	ldr	r2, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a77      	ldr	r2, [pc, #476]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0x32a>
 8001ffe:	4b75      	ldr	r3, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a74      	ldr	r2, [pc, #464]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	4b72      	ldr	r3, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	4a71      	ldr	r2, [pc, #452]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff f9a1 	bl	8001364 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff f99d 	bl	8001364 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0c5      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ee      	beq.n	8002026 <HAL_RCC_OscConfig+0x33a>
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff f98b 	bl	8001364 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff f987 	bl	8001364 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0af      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b5a      	ldr	r3, [pc, #360]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a55      	ldr	r2, [pc, #340]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 809b 	beq.w	80021c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002090:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d05c      	beq.n	8002156 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d141      	bne.n	8002128 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x4ec>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff f95b 	bl	8001364 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff f957 	bl	8001364 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e081      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c4:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	019b      	lsls	r3, r3, #6
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	3b01      	subs	r3, #1
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	061b      	lsls	r3, r3, #24
 80020f4:	4937      	ldr	r1, [pc, #220]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fa:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <HAL_RCC_OscConfig+0x4ec>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff f930 	bl	8001364 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff f92c 	bl	8001364 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e056      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x41c>
 8002126:	e04e      	b.n	80021c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_RCC_OscConfig+0x4ec>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff f919 	bl	8001364 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff f915 	bl	8001364 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e03f      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x44a>
 8002154:	e037      	b.n	80021c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e032      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002162:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <HAL_RCC_OscConfig+0x4e8>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d028      	beq.n	80021c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d121      	bne.n	80021c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d11a      	bne.n	80021c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002192:	4013      	ands	r3, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002198:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800219a:	4293      	cmp	r3, r2
 800219c:	d111      	bne.n	80021c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	3b01      	subs	r3, #1
 80021ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40007000 	.word	0x40007000
 80021d4:	40023800 	.word	0x40023800
 80021d8:	42470060 	.word	0x42470060

080021dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0cc      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f0:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d90c      	bls.n	8002218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b8      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	494d      	ldr	r1, [pc, #308]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d044      	beq.n	80022fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d119      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e07f      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d003      	beq.n	800229a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	2b03      	cmp	r3, #3
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229a:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06f      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e067      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ba:	4b37      	ldr	r3, [pc, #220]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f023 0203 	bic.w	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4934      	ldr	r1, [pc, #208]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022cc:	f7ff f84a 	bl	8001364 <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d4:	f7ff f846 	bl	8001364 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e04f      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 020c 	and.w	r2, r3, #12
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d1eb      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d20c      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e032      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4916      	ldr	r1, [pc, #88]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002362:	f000 f821 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490a      	ldr	r1, [pc, #40]	; (800239c <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe ffaa 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00
 8002398:	40023800 	.word	0x40023800
 800239c:	080045a8 	.word	0x080045a8
 80023a0:	20000000 	.word	0x20000000
 80023a4:	20000004 	.word	0x20000004

080023a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023ae:	2100      	movs	r1, #0
 80023b0:	6079      	str	r1, [r7, #4]
 80023b2:	2100      	movs	r1, #0
 80023b4:	60f9      	str	r1, [r7, #12]
 80023b6:	2100      	movs	r1, #0
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023ba:	2100      	movs	r1, #0
 80023bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023be:	4952      	ldr	r1, [pc, #328]	; (8002508 <HAL_RCC_GetSysClockFreq+0x160>)
 80023c0:	6889      	ldr	r1, [r1, #8]
 80023c2:	f001 010c 	and.w	r1, r1, #12
 80023c6:	2908      	cmp	r1, #8
 80023c8:	d00d      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80023ca:	2908      	cmp	r1, #8
 80023cc:	f200 8094 	bhi.w	80024f8 <HAL_RCC_GetSysClockFreq+0x150>
 80023d0:	2900      	cmp	r1, #0
 80023d2:	d002      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x32>
 80023d4:	2904      	cmp	r1, #4
 80023d6:	d003      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x38>
 80023d8:	e08e      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023da:	4b4c      	ldr	r3, [pc, #304]	; (800250c <HAL_RCC_GetSysClockFreq+0x164>)
 80023dc:	60bb      	str	r3, [r7, #8]
       break;
 80023de:	e08e      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023e0:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <HAL_RCC_GetSysClockFreq+0x168>)
 80023e2:	60bb      	str	r3, [r7, #8]
      break;
 80023e4:	e08b      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e6:	4948      	ldr	r1, [pc, #288]	; (8002508 <HAL_RCC_GetSysClockFreq+0x160>)
 80023e8:	6849      	ldr	r1, [r1, #4]
 80023ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80023ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f0:	4945      	ldr	r1, [pc, #276]	; (8002508 <HAL_RCC_GetSysClockFreq+0x160>)
 80023f2:	6849      	ldr	r1, [r1, #4]
 80023f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d024      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fc:	4942      	ldr	r1, [pc, #264]	; (8002508 <HAL_RCC_GetSysClockFreq+0x160>)
 80023fe:	6849      	ldr	r1, [r1, #4]
 8002400:	0989      	lsrs	r1, r1, #6
 8002402:	4608      	mov	r0, r1
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	f240 14ff 	movw	r4, #511	; 0x1ff
 800240c:	f04f 0500 	mov.w	r5, #0
 8002410:	ea00 0204 	and.w	r2, r0, r4
 8002414:	ea01 0305 	and.w	r3, r1, r5
 8002418:	493d      	ldr	r1, [pc, #244]	; (8002510 <HAL_RCC_GetSysClockFreq+0x168>)
 800241a:	fb01 f003 	mul.w	r0, r1, r3
 800241e:	2100      	movs	r1, #0
 8002420:	fb01 f102 	mul.w	r1, r1, r2
 8002424:	1844      	adds	r4, r0, r1
 8002426:	493a      	ldr	r1, [pc, #232]	; (8002510 <HAL_RCC_GetSysClockFreq+0x168>)
 8002428:	fba2 0101 	umull	r0, r1, r2, r1
 800242c:	1863      	adds	r3, r4, r1
 800242e:	4619      	mov	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f7fd ff32 	bl	80002a0 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4613      	mov	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e04a      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_GetSysClockFreq+0x160>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	461a      	mov	r2, r3
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	ea02 0400 	and.w	r4, r2, r0
 800245e:	ea03 0501 	and.w	r5, r3, r1
 8002462:	4620      	mov	r0, r4
 8002464:	4629      	mov	r1, r5
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	014b      	lsls	r3, r1, #5
 8002470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002474:	0142      	lsls	r2, r0, #5
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	1b00      	subs	r0, r0, r4
 800247c:	eb61 0105 	sbc.w	r1, r1, r5
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	018b      	lsls	r3, r1, #6
 800248a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800248e:	0182      	lsls	r2, r0, #6
 8002490:	1a12      	subs	r2, r2, r0
 8002492:	eb63 0301 	sbc.w	r3, r3, r1
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	00d9      	lsls	r1, r3, #3
 80024a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a4:	00d0      	lsls	r0, r2, #3
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	1912      	adds	r2, r2, r4
 80024ac:	eb45 0303 	adc.w	r3, r5, r3
 80024b0:	f04f 0000 	mov.w	r0, #0
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	0299      	lsls	r1, r3, #10
 80024ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024be:	0290      	lsls	r0, r2, #10
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	f7fd fee6 	bl	80002a0 <__aeabi_uldivmod>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4613      	mov	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_RCC_GetSysClockFreq+0x160>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	3301      	adds	r3, #1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	60bb      	str	r3, [r7, #8]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_RCC_GetSysClockFreq+0x164>)
 80024fa:	60bb      	str	r3, [r7, #8]
      break;
 80024fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fe:	68bb      	ldr	r3, [r7, #8]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bdb0      	pop	{r4, r5, r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	00f42400 	.word	0x00f42400
 8002510:	017d7840 	.word	0x017d7840

08002514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCC_GetHCLKFreq+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002530:	f7ff fff0 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0a9b      	lsrs	r3, r3, #10
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4903      	ldr	r1, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	080045b8 	.word	0x080045b8

08002554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002558:	f7ff ffdc 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0b5b      	lsrs	r3, r3, #13
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4903      	ldr	r1, [pc, #12]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	080045b8 	.word	0x080045b8

0800257c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e041      	b.n	8002612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fd54 	bl	8001050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 fa92 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d001      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e04e      	b.n	80026d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d022      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x80>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d01d      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x80>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d018      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x80>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x80>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_TIM_Base_Start_IT+0xd0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00e      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x80>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x80>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d004      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x80>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d111      	bne.n	80026c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d010      	beq.n	80026d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026be:	e007      	b.n	80026d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800
 80026ec:	40000c00 	.word	0x40000c00
 80026f0:	40010400 	.word	0x40010400
 80026f4:	40014000 	.word	0x40014000
 80026f8:	40001800 	.word	0x40001800

080026fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0202 	mvn.w	r2, #2
 8002728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f9b2 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f9a4 	bl	8002a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f9b5 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b04      	cmp	r3, #4
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0204 	mvn.w	r2, #4
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f988 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f97a 	bl	8002a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f98b 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d122      	bne.n	8002800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d11b      	bne.n	8002800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0208 	mvn.w	r2, #8
 80027d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2204      	movs	r2, #4
 80027d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f95e 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
 80027ec:	e005      	b.n	80027fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f950 	bl	8002a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f961 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b10      	cmp	r3, #16
 800280c:	d122      	bne.n	8002854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b10      	cmp	r3, #16
 800281a:	d11b      	bne.n	8002854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0210 	mvn.w	r2, #16
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2208      	movs	r2, #8
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f934 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f926 	bl	8002a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f937 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10e      	bne.n	8002880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d107      	bne.n	8002880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0201 	mvn.w	r2, #1
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fb12 	bl	8000ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d10e      	bne.n	80028ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d107      	bne.n	80028ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fadc 	bl	8002e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d107      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f8fc 	bl	8002ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d10e      	bne.n	8002904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d107      	bne.n	8002904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0220 	mvn.w	r2, #32
 80028fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 faa6 	bl	8002e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_TIM_ConfigClockSource+0x18>
 8002920:	2302      	movs	r3, #2
 8002922:	e0b3      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x180>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002942:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800294a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295c:	d03e      	beq.n	80029dc <HAL_TIM_ConfigClockSource+0xd0>
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002962:	f200 8087 	bhi.w	8002a74 <HAL_TIM_ConfigClockSource+0x168>
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	f000 8085 	beq.w	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	d87f      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x168>
 8002974:	2b70      	cmp	r3, #112	; 0x70
 8002976:	d01a      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xa2>
 8002978:	2b70      	cmp	r3, #112	; 0x70
 800297a:	d87b      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x168>
 800297c:	2b60      	cmp	r3, #96	; 0x60
 800297e:	d050      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x116>
 8002980:	2b60      	cmp	r3, #96	; 0x60
 8002982:	d877      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x168>
 8002984:	2b50      	cmp	r3, #80	; 0x50
 8002986:	d03c      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0xf6>
 8002988:	2b50      	cmp	r3, #80	; 0x50
 800298a:	d873      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x168>
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d058      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x136>
 8002990:	2b40      	cmp	r3, #64	; 0x40
 8002992:	d86f      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x168>
 8002994:	2b30      	cmp	r3, #48	; 0x30
 8002996:	d064      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x156>
 8002998:	2b30      	cmp	r3, #48	; 0x30
 800299a:	d86b      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x168>
 800299c:	2b20      	cmp	r3, #32
 800299e:	d060      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x156>
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d867      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x168>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05c      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x156>
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d05a      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029ac:	e062      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f000 f9ab 	bl	8002d18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	609a      	str	r2, [r3, #8]
      break;
 80029da:	e04e      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f000 f994 	bl	8002d18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029fe:	609a      	str	r2, [r3, #8]
      break;
 8002a00:	e03b      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f000 f908 	bl	8002c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2150      	movs	r1, #80	; 0x50
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f961 	bl	8002ce2 <TIM_ITRx_SetConfig>
      break;
 8002a20:	e02b      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f000 f927 	bl	8002c82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2160      	movs	r1, #96	; 0x60
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f951 	bl	8002ce2 <TIM_ITRx_SetConfig>
      break;
 8002a40:	e01b      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f000 f8e8 	bl	8002c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2140      	movs	r1, #64	; 0x40
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f941 	bl	8002ce2 <TIM_ITRx_SetConfig>
      break;
 8002a60:	e00b      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f000 f938 	bl	8002ce2 <TIM_ITRx_SetConfig>
        break;
 8002a72:	e002      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a40      	ldr	r2, [pc, #256]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d00f      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3d      	ldr	r2, [pc, #244]	; (8002bfc <TIM_Base_SetConfig+0x118>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00b      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3c      	ldr	r2, [pc, #240]	; (8002c00 <TIM_Base_SetConfig+0x11c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <TIM_Base_SetConfig+0x120>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3a      	ldr	r2, [pc, #232]	; (8002c08 <TIM_Base_SetConfig+0x124>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d108      	bne.n	8002b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02b      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d027      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2c      	ldr	r2, [pc, #176]	; (8002bfc <TIM_Base_SetConfig+0x118>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d023      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <TIM_Base_SetConfig+0x11c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01f      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2a      	ldr	r2, [pc, #168]	; (8002c04 <TIM_Base_SetConfig+0x120>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01b      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <TIM_Base_SetConfig+0x124>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d017      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a28      	ldr	r2, [pc, #160]	; (8002c0c <TIM_Base_SetConfig+0x128>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00f      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <TIM_Base_SetConfig+0x130>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <TIM_Base_SetConfig+0x134>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a24      	ldr	r2, [pc, #144]	; (8002c1c <TIM_Base_SetConfig+0x138>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <TIM_Base_SetConfig+0x13c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <TIM_Base_SetConfig+0xf8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <TIM_Base_SetConfig+0x124>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	615a      	str	r2, [r3, #20]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40010400 	.word	0x40010400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	40014400 	.word	0x40014400
 8002c14:	40014800 	.word	0x40014800
 8002c18:	40001800 	.word	0x40001800
 8002c1c:	40001c00 	.word	0x40001c00
 8002c20:	40002000 	.word	0x40002000

08002c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f023 0201 	bic.w	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f023 030a 	bic.w	r3, r3, #10
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b087      	sub	sp, #28
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f023 0210 	bic.w	r2, r3, #16
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	031b      	lsls	r3, r3, #12
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	621a      	str	r2, [r3, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f043 0307 	orr.w	r3, r3, #7
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	021a      	lsls	r2, r3, #8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e05a      	b.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d01d      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10c      	bne.n	8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	40010400 	.word	0x40010400
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40001800 	.word	0x40001800

08002e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e03f      	b.n	8002f0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe f8fc 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	; 0x24
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fc7b 	bl	80037b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b08a      	sub	sp, #40	; 0x28
 8002f16:	af02      	add	r7, sp, #8
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d17c      	bne.n	800302c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_UART_Transmit+0x2c>
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e075      	b.n	800302e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Transmit+0x3e>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e06e      	b.n	800302e <HAL_UART_Transmit+0x11c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2221      	movs	r2, #33	; 0x21
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f66:	f7fe f9fd 	bl	8001364 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	88fa      	ldrh	r2, [r7, #6]
 8002f76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f80:	d108      	bne.n	8002f94 <HAL_UART_Transmit+0x82>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	e003      	b.n	8002f9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fa4:	e02a      	b.n	8002ffc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fa3d 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e036      	b.n	800302e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10b      	bne.n	8002fde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	3302      	adds	r3, #2
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	e007      	b.n	8002fee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	3301      	adds	r3, #1
 8002fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1cf      	bne.n	8002fa6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	2140      	movs	r1, #64	; 0x40
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fa0d 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e006      	b.n	800302e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	4613      	mov	r3, r2
 8003042:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b20      	cmp	r3, #32
 800304e:	d11d      	bne.n	800308c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_UART_Receive_IT+0x26>
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e016      	b.n	800308e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_UART_Receive_IT+0x38>
 800306a:	2302      	movs	r3, #2
 800306c:	e00f      	b.n	800308e <HAL_UART_Receive_IT+0x58>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	461a      	mov	r2, r3
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fa1e 	bl	80034c4 <UART_Start_Receive_IT>
 8003088:	4603      	mov	r3, r0
 800308a:	e000      	b.n	800308e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_UART_IRQHandler+0x52>
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fad1 	bl	800368a <UART_Receive_IT>
      return;
 80030e8:	e17c      	b.n	80033e4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80b1 	beq.w	8003254 <HAL_UART_IRQHandler+0x1bc>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_UART_IRQHandler+0x70>
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80a6 	beq.w	8003254 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_UART_IRQHandler+0x90>
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_UART_IRQHandler+0xb0>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0202 	orr.w	r2, r3, #2
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_UART_IRQHandler+0xd0>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00f      	beq.n	8003192 <HAL_UART_IRQHandler+0xfa>
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <HAL_UART_IRQHandler+0xee>
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0208 	orr.w	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 811f 	beq.w	80033da <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_UART_IRQHandler+0x11e>
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fa6a 	bl	800368a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_UART_IRQHandler+0x146>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d031      	beq.n	8003242 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9aa 	bl	8003538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d123      	bne.n	800323a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003200:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	d013      	beq.n	8003232 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	4a77      	ldr	r2, [pc, #476]	; (80033ec <HAL_UART_IRQHandler+0x354>)
 8003210:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fb3d 	bl	8001896 <HAL_DMA_Abort_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800322c:	4610      	mov	r0, r2
 800322e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e00e      	b.n	8003250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8e6 	bl	8003404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e00a      	b.n	8003250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f8e2 	bl	8003404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e006      	b.n	8003250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f8de 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800324e:	e0c4      	b.n	80033da <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	bf00      	nop
    return;
 8003252:	e0c2      	b.n	80033da <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	2b01      	cmp	r3, #1
 800325a:	f040 80a2 	bne.w	80033a2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 809c 	beq.w	80033a2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8096 	beq.w	80033a2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d14f      	bne.n	800333a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032a4:	8a3b      	ldrh	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8099 	beq.w	80033de <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032b0:	8a3a      	ldrh	r2, [r7, #16]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	f080 8093 	bcs.w	80033de <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8a3a      	ldrh	r2, [r7, #16]
 80032bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c8:	d02b      	beq.n	8003322 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0210 	bic.w	r2, r2, #16
 8003316:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fa4a 	bl	80017b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332a:	b29b      	uxth	r3, r3
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	4619      	mov	r1, r3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f870 	bl	8003418 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003338:	e051      	b.n	80033de <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003342:	b29b      	uxth	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d047      	beq.n	80033e2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003352:	8a7b      	ldrh	r3, [r7, #18]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d044      	beq.n	80033e2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003366:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0210 	bic.w	r2, r2, #16
 8003394:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003396:	8a7b      	ldrh	r3, [r7, #18]
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f83c 	bl	8003418 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033a0:	e01f      	b.n	80033e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_UART_IRQHandler+0x326>
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8ff 	bl	80035ba <UART_Transmit_IT>
    return;
 80033bc:	e012      	b.n	80033e4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <HAL_UART_IRQHandler+0x34c>
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f941 	bl	800365a <UART_EndTransmit_IT>
    return;
 80033d8:	e004      	b.n	80033e4 <HAL_UART_IRQHandler+0x34c>
    return;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80033e2:	bf00      	nop
  }
}
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	08003593 	.word	0x08003593

080033f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003440:	e02c      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d028      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x30>
 8003450:	f7fd ff88 	bl	8001364 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	429a      	cmp	r2, r3
 800345e:	d21d      	bcs.n	800349c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800346e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e00f      	b.n	80034bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d0c3      	beq.n	8003442 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2222      	movs	r2, #34	; 0x22
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003508:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800354e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0210 	bic.w	r2, r2, #16
 8003576:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff ff29 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b21      	cmp	r3, #33	; 0x21
 80035cc:	d13e      	bne.n	800364c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	d114      	bne.n	8003602 <UART_Transmit_IT+0x48>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d110      	bne.n	8003602 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	1c9a      	adds	r2, r3, #2
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]
 8003600:	e008      	b.n	8003614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	1c59      	adds	r1, r3, #1
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6211      	str	r1, [r2, #32]
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4619      	mov	r1, r3
 8003622:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10f      	bne.n	8003648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff feb8 	bl	80033f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b22      	cmp	r3, #34	; 0x22
 800369c:	f040 8087 	bne.w	80037ae <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a8:	d117      	bne.n	80036da <UART_Receive_IT+0x50>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d113      	bne.n	80036da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	1c9a      	adds	r2, r3, #2
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
 80036d8:	e026      	b.n	8003728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ec:	d007      	beq.n	80036fe <UART_Receive_IT+0x74>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <UART_Receive_IT+0x82>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e008      	b.n	800371e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29b      	uxth	r3, r3
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4619      	mov	r1, r3
 8003736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003738:	2b00      	cmp	r3, #0
 800373a:	d136      	bne.n	80037aa <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0220 	bic.w	r2, r2, #32
 800374a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800375a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	2b01      	cmp	r3, #1
 800377a:	d10e      	bne.n	800379a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0210 	bic.w	r2, r2, #16
 800378a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fe40 	bl	8003418 <HAL_UARTEx_RxEventCallback>
 8003798:	e002      	b.n	80037a0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fb9c 	bl	8000ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e002      	b.n	80037b0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b09f      	sub	sp, #124	; 0x7c
 80037be:	af00      	add	r7, sp, #0
 80037c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	68d9      	ldr	r1, [r3, #12]
 80037d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	ea40 0301 	orr.w	r3, r0, r1
 80037d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037fc:	f021 010c 	bic.w	r1, r1, #12
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003806:	430b      	orrs	r3, r1
 8003808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	6999      	ldr	r1, [r3, #24]
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	ea40 0301 	orr.w	r3, r0, r1
 8003820:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4bc5      	ldr	r3, [pc, #788]	; (8003b3c <UART_SetConfig+0x384>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d004      	beq.n	8003836 <UART_SetConfig+0x7e>
 800382c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4bc3      	ldr	r3, [pc, #780]	; (8003b40 <UART_SetConfig+0x388>)
 8003832:	429a      	cmp	r2, r3
 8003834:	d103      	bne.n	800383e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003836:	f7fe fe8d 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 800383a:	6778      	str	r0, [r7, #116]	; 0x74
 800383c:	e002      	b.n	8003844 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7fe fe75 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8003842:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	f040 80b6 	bne.w	80039bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003852:	461c      	mov	r4, r3
 8003854:	f04f 0500 	mov.w	r5, #0
 8003858:	4622      	mov	r2, r4
 800385a:	462b      	mov	r3, r5
 800385c:	1891      	adds	r1, r2, r2
 800385e:	6439      	str	r1, [r7, #64]	; 0x40
 8003860:	415b      	adcs	r3, r3
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
 8003864:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003868:	1912      	adds	r2, r2, r4
 800386a:	eb45 0303 	adc.w	r3, r5, r3
 800386e:	f04f 0000 	mov.w	r0, #0
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	00d9      	lsls	r1, r3, #3
 8003878:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800387c:	00d0      	lsls	r0, r2, #3
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	1911      	adds	r1, r2, r4
 8003884:	6639      	str	r1, [r7, #96]	; 0x60
 8003886:	416b      	adcs	r3, r5
 8003888:	667b      	str	r3, [r7, #100]	; 0x64
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	1891      	adds	r1, r2, r2
 8003896:	63b9      	str	r1, [r7, #56]	; 0x38
 8003898:	415b      	adcs	r3, r3
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038a4:	f7fc fcfc 	bl	80002a0 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4ba5      	ldr	r3, [pc, #660]	; (8003b44 <UART_SetConfig+0x38c>)
 80038ae:	fba3 2302 	umull	r2, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	011e      	lsls	r6, r3, #4
 80038b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b8:	461c      	mov	r4, r3
 80038ba:	f04f 0500 	mov.w	r5, #0
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	6339      	str	r1, [r7, #48]	; 0x30
 80038c6:	415b      	adcs	r3, r3
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038ce:	1912      	adds	r2, r2, r4
 80038d0:	eb45 0303 	adc.w	r3, r5, r3
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	00d9      	lsls	r1, r3, #3
 80038de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038e2:	00d0      	lsls	r0, r2, #3
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	1911      	adds	r1, r2, r4
 80038ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80038ec:	416b      	adcs	r3, r5
 80038ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	461a      	mov	r2, r3
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	1891      	adds	r1, r2, r2
 80038fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80038fe:	415b      	adcs	r3, r3
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003906:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800390a:	f7fc fcc9 	bl	80002a0 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4b8c      	ldr	r3, [pc, #560]	; (8003b44 <UART_SetConfig+0x38c>)
 8003914:	fba3 1302 	umull	r1, r3, r3, r2
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	2164      	movs	r1, #100	; 0x64
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	3332      	adds	r3, #50	; 0x32
 8003926:	4a87      	ldr	r2, [pc, #540]	; (8003b44 <UART_SetConfig+0x38c>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003934:	441e      	add	r6, r3
 8003936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003938:	4618      	mov	r0, r3
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	1894      	adds	r4, r2, r2
 8003944:	623c      	str	r4, [r7, #32]
 8003946:	415b      	adcs	r3, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394e:	1812      	adds	r2, r2, r0
 8003950:	eb41 0303 	adc.w	r3, r1, r3
 8003954:	f04f 0400 	mov.w	r4, #0
 8003958:	f04f 0500 	mov.w	r5, #0
 800395c:	00dd      	lsls	r5, r3, #3
 800395e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003962:	00d4      	lsls	r4, r2, #3
 8003964:	4622      	mov	r2, r4
 8003966:	462b      	mov	r3, r5
 8003968:	1814      	adds	r4, r2, r0
 800396a:	653c      	str	r4, [r7, #80]	; 0x50
 800396c:	414b      	adcs	r3, r1
 800396e:	657b      	str	r3, [r7, #84]	; 0x54
 8003970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	461a      	mov	r2, r3
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	1891      	adds	r1, r2, r2
 800397c:	61b9      	str	r1, [r7, #24]
 800397e:	415b      	adcs	r3, r3
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003986:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800398a:	f7fc fc89 	bl	80002a0 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <UART_SetConfig+0x38c>)
 8003994:	fba3 1302 	umull	r1, r3, r3, r2
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	2164      	movs	r1, #100	; 0x64
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	3332      	adds	r3, #50	; 0x32
 80039a6:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <UART_SetConfig+0x38c>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	f003 0207 	and.w	r2, r3, #7
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4432      	add	r2, r6
 80039b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039ba:	e0b9      	b.n	8003b30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039be:	461c      	mov	r4, r3
 80039c0:	f04f 0500 	mov.w	r5, #0
 80039c4:	4622      	mov	r2, r4
 80039c6:	462b      	mov	r3, r5
 80039c8:	1891      	adds	r1, r2, r2
 80039ca:	6139      	str	r1, [r7, #16]
 80039cc:	415b      	adcs	r3, r3
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039d4:	1912      	adds	r2, r2, r4
 80039d6:	eb45 0303 	adc.w	r3, r5, r3
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	00d9      	lsls	r1, r3, #3
 80039e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039e8:	00d0      	lsls	r0, r2, #3
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	eb12 0804 	adds.w	r8, r2, r4
 80039f2:	eb43 0905 	adc.w	r9, r3, r5
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	008b      	lsls	r3, r1, #2
 8003a0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a0e:	0082      	lsls	r2, r0, #2
 8003a10:	4640      	mov	r0, r8
 8003a12:	4649      	mov	r1, r9
 8003a14:	f7fc fc44 	bl	80002a0 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4b49      	ldr	r3, [pc, #292]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	011e      	lsls	r6, r3, #4
 8003a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	1894      	adds	r4, r2, r2
 8003a34:	60bc      	str	r4, [r7, #8]
 8003a36:	415b      	adcs	r3, r3
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a3e:	1812      	adds	r2, r2, r0
 8003a40:	eb41 0303 	adc.w	r3, r1, r3
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	f04f 0500 	mov.w	r5, #0
 8003a4c:	00dd      	lsls	r5, r3, #3
 8003a4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a52:	00d4      	lsls	r4, r2, #3
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	1814      	adds	r4, r2, r0
 8003a5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	008b      	lsls	r3, r1, #2
 8003a74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a78:	0082      	lsls	r2, r0, #2
 8003a7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a7e:	f7fc fc0f 	bl	80002a0 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a88:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2164      	movs	r1, #100	; 0x64
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	3332      	adds	r3, #50	; 0x32
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <UART_SetConfig+0x38c>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa6:	441e      	add	r6, r3
 8003aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	1894      	adds	r4, r2, r2
 8003ab6:	603c      	str	r4, [r7, #0]
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac0:	1812      	adds	r2, r2, r0
 8003ac2:	eb41 0303 	adc.w	r3, r1, r3
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	f04f 0500 	mov.w	r5, #0
 8003ace:	00dd      	lsls	r5, r3, #3
 8003ad0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ad4:	00d4      	lsls	r4, r2, #3
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	462b      	mov	r3, r5
 8003ada:	eb12 0a00 	adds.w	sl, r2, r0
 8003ade:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	008b      	lsls	r3, r1, #2
 8003af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003afa:	0082      	lsls	r2, r0, #2
 8003afc:	4650      	mov	r0, sl
 8003afe:	4659      	mov	r1, fp
 8003b00:	f7fc fbce 	bl	80002a0 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <UART_SetConfig+0x38c>)
 8003b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2164      	movs	r1, #100	; 0x64
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	3332      	adds	r3, #50	; 0x32
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <UART_SetConfig+0x38c>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	f003 020f 	and.w	r2, r3, #15
 8003b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4432      	add	r2, r6
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	377c      	adds	r7, #124	; 0x7c
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40011000 	.word	0x40011000
 8003b40:	40011400 	.word	0x40011400
 8003b44:	51eb851f 	.word	0x51eb851f

08003b48 <atoi>:
 8003b48:	220a      	movs	r2, #10
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f000 b8ea 	b.w	8003d24 <strtol>

08003b50 <__errno>:
 8003b50:	4b01      	ldr	r3, [pc, #4]	; (8003b58 <__errno+0x8>)
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <__libc_init_array>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	4d0d      	ldr	r5, [pc, #52]	; (8003b94 <__libc_init_array+0x38>)
 8003b60:	4c0d      	ldr	r4, [pc, #52]	; (8003b98 <__libc_init_array+0x3c>)
 8003b62:	1b64      	subs	r4, r4, r5
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	2600      	movs	r6, #0
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d109      	bne.n	8003b80 <__libc_init_array+0x24>
 8003b6c:	4d0b      	ldr	r5, [pc, #44]	; (8003b9c <__libc_init_array+0x40>)
 8003b6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ba0 <__libc_init_array+0x44>)
 8003b70:	f000 fcf0 	bl	8004554 <_init>
 8003b74:	1b64      	subs	r4, r4, r5
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	2600      	movs	r6, #0
 8003b7a:	42a6      	cmp	r6, r4
 8003b7c:	d105      	bne.n	8003b8a <__libc_init_array+0x2e>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b84:	4798      	blx	r3
 8003b86:	3601      	adds	r6, #1
 8003b88:	e7ee      	b.n	8003b68 <__libc_init_array+0xc>
 8003b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8e:	4798      	blx	r3
 8003b90:	3601      	adds	r6, #1
 8003b92:	e7f2      	b.n	8003b7a <__libc_init_array+0x1e>
 8003b94:	080046fc 	.word	0x080046fc
 8003b98:	080046fc 	.word	0x080046fc
 8003b9c:	080046fc 	.word	0x080046fc
 8003ba0:	08004700 	.word	0x08004700

08003ba4 <memset>:
 8003ba4:	4402      	add	r2, r0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d100      	bne.n	8003bae <memset+0xa>
 8003bac:	4770      	bx	lr
 8003bae:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb2:	e7f9      	b.n	8003ba8 <memset+0x4>

08003bb4 <siprintf>:
 8003bb4:	b40e      	push	{r1, r2, r3}
 8003bb6:	b500      	push	{lr}
 8003bb8:	b09c      	sub	sp, #112	; 0x70
 8003bba:	ab1d      	add	r3, sp, #116	; 0x74
 8003bbc:	9002      	str	r0, [sp, #8]
 8003bbe:	9006      	str	r0, [sp, #24]
 8003bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bc4:	4809      	ldr	r0, [pc, #36]	; (8003bec <siprintf+0x38>)
 8003bc6:	9107      	str	r1, [sp, #28]
 8003bc8:	9104      	str	r1, [sp, #16]
 8003bca:	4909      	ldr	r1, [pc, #36]	; (8003bf0 <siprintf+0x3c>)
 8003bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bd0:	9105      	str	r1, [sp, #20]
 8003bd2:	6800      	ldr	r0, [r0, #0]
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	a902      	add	r1, sp, #8
 8003bd8:	f000 f90a 	bl	8003df0 <_svfiprintf_r>
 8003bdc:	9b02      	ldr	r3, [sp, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	b01c      	add	sp, #112	; 0x70
 8003be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be8:	b003      	add	sp, #12
 8003bea:	4770      	bx	lr
 8003bec:	2000000c 	.word	0x2000000c
 8003bf0:	ffff0208 	.word	0xffff0208

08003bf4 <strncpy>:
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	3901      	subs	r1, #1
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	b132      	cbz	r2, 8003c0a <strncpy+0x16>
 8003bfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003c00:	f803 4b01 	strb.w	r4, [r3], #1
 8003c04:	3a01      	subs	r2, #1
 8003c06:	2c00      	cmp	r4, #0
 8003c08:	d1f7      	bne.n	8003bfa <strncpy+0x6>
 8003c0a:	441a      	add	r2, r3
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d100      	bne.n	8003c14 <strncpy+0x20>
 8003c12:	bd10      	pop	{r4, pc}
 8003c14:	f803 1b01 	strb.w	r1, [r3], #1
 8003c18:	e7f9      	b.n	8003c0e <strncpy+0x1a>
	...

08003c1c <_strtol_l.isra.0>:
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c22:	d001      	beq.n	8003c28 <_strtol_l.isra.0+0xc>
 8003c24:	2b24      	cmp	r3, #36	; 0x24
 8003c26:	d906      	bls.n	8003c36 <_strtol_l.isra.0+0x1a>
 8003c28:	f7ff ff92 	bl	8003b50 <__errno>
 8003c2c:	2316      	movs	r3, #22
 8003c2e:	6003      	str	r3, [r0, #0]
 8003c30:	2000      	movs	r0, #0
 8003c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c36:	4f3a      	ldr	r7, [pc, #232]	; (8003d20 <_strtol_l.isra.0+0x104>)
 8003c38:	468e      	mov	lr, r1
 8003c3a:	4676      	mov	r6, lr
 8003c3c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003c40:	5de5      	ldrb	r5, [r4, r7]
 8003c42:	f015 0508 	ands.w	r5, r5, #8
 8003c46:	d1f8      	bne.n	8003c3a <_strtol_l.isra.0+0x1e>
 8003c48:	2c2d      	cmp	r4, #45	; 0x2d
 8003c4a:	d134      	bne.n	8003cb6 <_strtol_l.isra.0+0x9a>
 8003c4c:	f89e 4000 	ldrb.w	r4, [lr]
 8003c50:	f04f 0801 	mov.w	r8, #1
 8003c54:	f106 0e02 	add.w	lr, r6, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05c      	beq.n	8003d16 <_strtol_l.isra.0+0xfa>
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d10c      	bne.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003c60:	2c30      	cmp	r4, #48	; 0x30
 8003c62:	d10a      	bne.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003c64:	f89e 4000 	ldrb.w	r4, [lr]
 8003c68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003c6c:	2c58      	cmp	r4, #88	; 0x58
 8003c6e:	d14d      	bne.n	8003d0c <_strtol_l.isra.0+0xf0>
 8003c70:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003c74:	2310      	movs	r3, #16
 8003c76:	f10e 0e02 	add.w	lr, lr, #2
 8003c7a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003c7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003c82:	2600      	movs	r6, #0
 8003c84:	fbbc f9f3 	udiv	r9, ip, r3
 8003c88:	4635      	mov	r5, r6
 8003c8a:	fb03 ca19 	mls	sl, r3, r9, ip
 8003c8e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003c92:	2f09      	cmp	r7, #9
 8003c94:	d818      	bhi.n	8003cc8 <_strtol_l.isra.0+0xac>
 8003c96:	463c      	mov	r4, r7
 8003c98:	42a3      	cmp	r3, r4
 8003c9a:	dd24      	ble.n	8003ce6 <_strtol_l.isra.0+0xca>
 8003c9c:	2e00      	cmp	r6, #0
 8003c9e:	db1f      	blt.n	8003ce0 <_strtol_l.isra.0+0xc4>
 8003ca0:	45a9      	cmp	r9, r5
 8003ca2:	d31d      	bcc.n	8003ce0 <_strtol_l.isra.0+0xc4>
 8003ca4:	d101      	bne.n	8003caa <_strtol_l.isra.0+0x8e>
 8003ca6:	45a2      	cmp	sl, r4
 8003ca8:	db1a      	blt.n	8003ce0 <_strtol_l.isra.0+0xc4>
 8003caa:	fb05 4503 	mla	r5, r5, r3, r4
 8003cae:	2601      	movs	r6, #1
 8003cb0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003cb4:	e7eb      	b.n	8003c8e <_strtol_l.isra.0+0x72>
 8003cb6:	2c2b      	cmp	r4, #43	; 0x2b
 8003cb8:	bf08      	it	eq
 8003cba:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003cbe:	46a8      	mov	r8, r5
 8003cc0:	bf08      	it	eq
 8003cc2:	f106 0e02 	addeq.w	lr, r6, #2
 8003cc6:	e7c7      	b.n	8003c58 <_strtol_l.isra.0+0x3c>
 8003cc8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003ccc:	2f19      	cmp	r7, #25
 8003cce:	d801      	bhi.n	8003cd4 <_strtol_l.isra.0+0xb8>
 8003cd0:	3c37      	subs	r4, #55	; 0x37
 8003cd2:	e7e1      	b.n	8003c98 <_strtol_l.isra.0+0x7c>
 8003cd4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003cd8:	2f19      	cmp	r7, #25
 8003cda:	d804      	bhi.n	8003ce6 <_strtol_l.isra.0+0xca>
 8003cdc:	3c57      	subs	r4, #87	; 0x57
 8003cde:	e7db      	b.n	8003c98 <_strtol_l.isra.0+0x7c>
 8003ce0:	f04f 36ff 	mov.w	r6, #4294967295
 8003ce4:	e7e4      	b.n	8003cb0 <_strtol_l.isra.0+0x94>
 8003ce6:	2e00      	cmp	r6, #0
 8003ce8:	da05      	bge.n	8003cf6 <_strtol_l.isra.0+0xda>
 8003cea:	2322      	movs	r3, #34	; 0x22
 8003cec:	6003      	str	r3, [r0, #0]
 8003cee:	4665      	mov	r5, ip
 8003cf0:	b942      	cbnz	r2, 8003d04 <_strtol_l.isra.0+0xe8>
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	e79d      	b.n	8003c32 <_strtol_l.isra.0+0x16>
 8003cf6:	f1b8 0f00 	cmp.w	r8, #0
 8003cfa:	d000      	beq.n	8003cfe <_strtol_l.isra.0+0xe2>
 8003cfc:	426d      	negs	r5, r5
 8003cfe:	2a00      	cmp	r2, #0
 8003d00:	d0f7      	beq.n	8003cf2 <_strtol_l.isra.0+0xd6>
 8003d02:	b10e      	cbz	r6, 8003d08 <_strtol_l.isra.0+0xec>
 8003d04:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003d08:	6011      	str	r1, [r2, #0]
 8003d0a:	e7f2      	b.n	8003cf2 <_strtol_l.isra.0+0xd6>
 8003d0c:	2430      	movs	r4, #48	; 0x30
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1b3      	bne.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003d12:	2308      	movs	r3, #8
 8003d14:	e7b1      	b.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003d16:	2c30      	cmp	r4, #48	; 0x30
 8003d18:	d0a4      	beq.n	8003c64 <_strtol_l.isra.0+0x48>
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	e7ad      	b.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003d1e:	bf00      	nop
 8003d20:	080045c1 	.word	0x080045c1

08003d24 <strtol>:
 8003d24:	4613      	mov	r3, r2
 8003d26:	460a      	mov	r2, r1
 8003d28:	4601      	mov	r1, r0
 8003d2a:	4802      	ldr	r0, [pc, #8]	; (8003d34 <strtol+0x10>)
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f7ff bf75 	b.w	8003c1c <_strtol_l.isra.0>
 8003d32:	bf00      	nop
 8003d34:	2000000c 	.word	0x2000000c

08003d38 <__ssputs_r>:
 8003d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3c:	688e      	ldr	r6, [r1, #8]
 8003d3e:	429e      	cmp	r6, r3
 8003d40:	4682      	mov	sl, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	4690      	mov	r8, r2
 8003d46:	461f      	mov	r7, r3
 8003d48:	d838      	bhi.n	8003dbc <__ssputs_r+0x84>
 8003d4a:	898a      	ldrh	r2, [r1, #12]
 8003d4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d50:	d032      	beq.n	8003db8 <__ssputs_r+0x80>
 8003d52:	6825      	ldr	r5, [r4, #0]
 8003d54:	6909      	ldr	r1, [r1, #16]
 8003d56:	eba5 0901 	sub.w	r9, r5, r1
 8003d5a:	6965      	ldr	r5, [r4, #20]
 8003d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d64:	3301      	adds	r3, #1
 8003d66:	444b      	add	r3, r9
 8003d68:	106d      	asrs	r5, r5, #1
 8003d6a:	429d      	cmp	r5, r3
 8003d6c:	bf38      	it	cc
 8003d6e:	461d      	movcc	r5, r3
 8003d70:	0553      	lsls	r3, r2, #21
 8003d72:	d531      	bpl.n	8003dd8 <__ssputs_r+0xa0>
 8003d74:	4629      	mov	r1, r5
 8003d76:	f000 fb47 	bl	8004408 <_malloc_r>
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	b950      	cbnz	r0, 8003d94 <__ssputs_r+0x5c>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	f8ca 3000 	str.w	r3, [sl]
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8a:	81a3      	strh	r3, [r4, #12]
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d94:	6921      	ldr	r1, [r4, #16]
 8003d96:	464a      	mov	r2, r9
 8003d98:	f000 fabe 	bl	8004318 <memcpy>
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da6:	81a3      	strh	r3, [r4, #12]
 8003da8:	6126      	str	r6, [r4, #16]
 8003daa:	6165      	str	r5, [r4, #20]
 8003dac:	444e      	add	r6, r9
 8003dae:	eba5 0509 	sub.w	r5, r5, r9
 8003db2:	6026      	str	r6, [r4, #0]
 8003db4:	60a5      	str	r5, [r4, #8]
 8003db6:	463e      	mov	r6, r7
 8003db8:	42be      	cmp	r6, r7
 8003dba:	d900      	bls.n	8003dbe <__ssputs_r+0x86>
 8003dbc:	463e      	mov	r6, r7
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	f000 fab6 	bl	8004334 <memmove>
 8003dc8:	68a3      	ldr	r3, [r4, #8]
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	1b9b      	subs	r3, r3, r6
 8003dce:	4432      	add	r2, r6
 8003dd0:	60a3      	str	r3, [r4, #8]
 8003dd2:	6022      	str	r2, [r4, #0]
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	e7db      	b.n	8003d90 <__ssputs_r+0x58>
 8003dd8:	462a      	mov	r2, r5
 8003dda:	f000 fb6f 	bl	80044bc <_realloc_r>
 8003dde:	4606      	mov	r6, r0
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d1e1      	bne.n	8003da8 <__ssputs_r+0x70>
 8003de4:	6921      	ldr	r1, [r4, #16]
 8003de6:	4650      	mov	r0, sl
 8003de8:	f000 fabe 	bl	8004368 <_free_r>
 8003dec:	e7c7      	b.n	8003d7e <__ssputs_r+0x46>
	...

08003df0 <_svfiprintf_r>:
 8003df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df4:	4698      	mov	r8, r3
 8003df6:	898b      	ldrh	r3, [r1, #12]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	b09d      	sub	sp, #116	; 0x74
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	460d      	mov	r5, r1
 8003e00:	4614      	mov	r4, r2
 8003e02:	d50e      	bpl.n	8003e22 <_svfiprintf_r+0x32>
 8003e04:	690b      	ldr	r3, [r1, #16]
 8003e06:	b963      	cbnz	r3, 8003e22 <_svfiprintf_r+0x32>
 8003e08:	2140      	movs	r1, #64	; 0x40
 8003e0a:	f000 fafd 	bl	8004408 <_malloc_r>
 8003e0e:	6028      	str	r0, [r5, #0]
 8003e10:	6128      	str	r0, [r5, #16]
 8003e12:	b920      	cbnz	r0, 8003e1e <_svfiprintf_r+0x2e>
 8003e14:	230c      	movs	r3, #12
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e0d1      	b.n	8003fc2 <_svfiprintf_r+0x1d2>
 8003e1e:	2340      	movs	r3, #64	; 0x40
 8003e20:	616b      	str	r3, [r5, #20]
 8003e22:	2300      	movs	r3, #0
 8003e24:	9309      	str	r3, [sp, #36]	; 0x24
 8003e26:	2320      	movs	r3, #32
 8003e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e30:	2330      	movs	r3, #48	; 0x30
 8003e32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fdc <_svfiprintf_r+0x1ec>
 8003e36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e3a:	f04f 0901 	mov.w	r9, #1
 8003e3e:	4623      	mov	r3, r4
 8003e40:	469a      	mov	sl, r3
 8003e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e46:	b10a      	cbz	r2, 8003e4c <_svfiprintf_r+0x5c>
 8003e48:	2a25      	cmp	r2, #37	; 0x25
 8003e4a:	d1f9      	bne.n	8003e40 <_svfiprintf_r+0x50>
 8003e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e50:	d00b      	beq.n	8003e6a <_svfiprintf_r+0x7a>
 8003e52:	465b      	mov	r3, fp
 8003e54:	4622      	mov	r2, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff ff6d 	bl	8003d38 <__ssputs_r>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f000 80aa 	beq.w	8003fb8 <_svfiprintf_r+0x1c8>
 8003e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e66:	445a      	add	r2, fp
 8003e68:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80a2 	beq.w	8003fb8 <_svfiprintf_r+0x1c8>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e7e:	f10a 0a01 	add.w	sl, sl, #1
 8003e82:	9304      	str	r3, [sp, #16]
 8003e84:	9307      	str	r3, [sp, #28]
 8003e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e8c:	4654      	mov	r4, sl
 8003e8e:	2205      	movs	r2, #5
 8003e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e94:	4851      	ldr	r0, [pc, #324]	; (8003fdc <_svfiprintf_r+0x1ec>)
 8003e96:	f7fc f9b3 	bl	8000200 <memchr>
 8003e9a:	9a04      	ldr	r2, [sp, #16]
 8003e9c:	b9d8      	cbnz	r0, 8003ed6 <_svfiprintf_r+0xe6>
 8003e9e:	06d0      	lsls	r0, r2, #27
 8003ea0:	bf44      	itt	mi
 8003ea2:	2320      	movmi	r3, #32
 8003ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea8:	0711      	lsls	r1, r2, #28
 8003eaa:	bf44      	itt	mi
 8003eac:	232b      	movmi	r3, #43	; 0x2b
 8003eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb8:	d015      	beq.n	8003ee6 <_svfiprintf_r+0xf6>
 8003eba:	9a07      	ldr	r2, [sp, #28]
 8003ebc:	4654      	mov	r4, sl
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f04f 0c0a 	mov.w	ip, #10
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eca:	3b30      	subs	r3, #48	; 0x30
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d94e      	bls.n	8003f6e <_svfiprintf_r+0x17e>
 8003ed0:	b1b0      	cbz	r0, 8003f00 <_svfiprintf_r+0x110>
 8003ed2:	9207      	str	r2, [sp, #28]
 8003ed4:	e014      	b.n	8003f00 <_svfiprintf_r+0x110>
 8003ed6:	eba0 0308 	sub.w	r3, r0, r8
 8003eda:	fa09 f303 	lsl.w	r3, r9, r3
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	9304      	str	r3, [sp, #16]
 8003ee2:	46a2      	mov	sl, r4
 8003ee4:	e7d2      	b.n	8003e8c <_svfiprintf_r+0x9c>
 8003ee6:	9b03      	ldr	r3, [sp, #12]
 8003ee8:	1d19      	adds	r1, r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	9103      	str	r1, [sp, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfbb      	ittet	lt
 8003ef2:	425b      	neglt	r3, r3
 8003ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef8:	9307      	strge	r3, [sp, #28]
 8003efa:	9307      	strlt	r3, [sp, #28]
 8003efc:	bfb8      	it	lt
 8003efe:	9204      	strlt	r2, [sp, #16]
 8003f00:	7823      	ldrb	r3, [r4, #0]
 8003f02:	2b2e      	cmp	r3, #46	; 0x2e
 8003f04:	d10c      	bne.n	8003f20 <_svfiprintf_r+0x130>
 8003f06:	7863      	ldrb	r3, [r4, #1]
 8003f08:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0a:	d135      	bne.n	8003f78 <_svfiprintf_r+0x188>
 8003f0c:	9b03      	ldr	r3, [sp, #12]
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	9203      	str	r2, [sp, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bfb8      	it	lt
 8003f18:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f1c:	3402      	adds	r4, #2
 8003f1e:	9305      	str	r3, [sp, #20]
 8003f20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fec <_svfiprintf_r+0x1fc>
 8003f24:	7821      	ldrb	r1, [r4, #0]
 8003f26:	2203      	movs	r2, #3
 8003f28:	4650      	mov	r0, sl
 8003f2a:	f7fc f969 	bl	8000200 <memchr>
 8003f2e:	b140      	cbz	r0, 8003f42 <_svfiprintf_r+0x152>
 8003f30:	2340      	movs	r3, #64	; 0x40
 8003f32:	eba0 000a 	sub.w	r0, r0, sl
 8003f36:	fa03 f000 	lsl.w	r0, r3, r0
 8003f3a:	9b04      	ldr	r3, [sp, #16]
 8003f3c:	4303      	orrs	r3, r0
 8003f3e:	3401      	adds	r4, #1
 8003f40:	9304      	str	r3, [sp, #16]
 8003f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f46:	4826      	ldr	r0, [pc, #152]	; (8003fe0 <_svfiprintf_r+0x1f0>)
 8003f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4c:	2206      	movs	r2, #6
 8003f4e:	f7fc f957 	bl	8000200 <memchr>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d038      	beq.n	8003fc8 <_svfiprintf_r+0x1d8>
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <_svfiprintf_r+0x1f4>)
 8003f58:	bb1b      	cbnz	r3, 8003fa2 <_svfiprintf_r+0x1b2>
 8003f5a:	9b03      	ldr	r3, [sp, #12]
 8003f5c:	3307      	adds	r3, #7
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	3308      	adds	r3, #8
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f68:	4433      	add	r3, r6
 8003f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6c:	e767      	b.n	8003e3e <_svfiprintf_r+0x4e>
 8003f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f72:	460c      	mov	r4, r1
 8003f74:	2001      	movs	r0, #1
 8003f76:	e7a5      	b.n	8003ec4 <_svfiprintf_r+0xd4>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	3401      	adds	r4, #1
 8003f7c:	9305      	str	r3, [sp, #20]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f04f 0c0a 	mov.w	ip, #10
 8003f84:	4620      	mov	r0, r4
 8003f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f8a:	3a30      	subs	r2, #48	; 0x30
 8003f8c:	2a09      	cmp	r2, #9
 8003f8e:	d903      	bls.n	8003f98 <_svfiprintf_r+0x1a8>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0c5      	beq.n	8003f20 <_svfiprintf_r+0x130>
 8003f94:	9105      	str	r1, [sp, #20]
 8003f96:	e7c3      	b.n	8003f20 <_svfiprintf_r+0x130>
 8003f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e7f0      	b.n	8003f84 <_svfiprintf_r+0x194>
 8003fa2:	ab03      	add	r3, sp, #12
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	462a      	mov	r2, r5
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <_svfiprintf_r+0x1f8>)
 8003faa:	a904      	add	r1, sp, #16
 8003fac:	4638      	mov	r0, r7
 8003fae:	f3af 8000 	nop.w
 8003fb2:	1c42      	adds	r2, r0, #1
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	d1d6      	bne.n	8003f66 <_svfiprintf_r+0x176>
 8003fb8:	89ab      	ldrh	r3, [r5, #12]
 8003fba:	065b      	lsls	r3, r3, #25
 8003fbc:	f53f af2c 	bmi.w	8003e18 <_svfiprintf_r+0x28>
 8003fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc2:	b01d      	add	sp, #116	; 0x74
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc8:	ab03      	add	r3, sp, #12
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	462a      	mov	r2, r5
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <_svfiprintf_r+0x1f8>)
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	f000 f87a 	bl	80040cc <_printf_i>
 8003fd8:	e7eb      	b.n	8003fb2 <_svfiprintf_r+0x1c2>
 8003fda:	bf00      	nop
 8003fdc:	080046c1 	.word	0x080046c1
 8003fe0:	080046cb 	.word	0x080046cb
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	08003d39 	.word	0x08003d39
 8003fec:	080046c7 	.word	0x080046c7

08003ff0 <_printf_common>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	688a      	ldr	r2, [r1, #8]
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004000:	4293      	cmp	r3, r2
 8004002:	bfb8      	it	lt
 8004004:	4613      	movlt	r3, r2
 8004006:	6033      	str	r3, [r6, #0]
 8004008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400c:	4607      	mov	r7, r0
 800400e:	460c      	mov	r4, r1
 8004010:	b10a      	cbz	r2, 8004016 <_printf_common+0x26>
 8004012:	3301      	adds	r3, #1
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0699      	lsls	r1, r3, #26
 800401a:	bf42      	ittt	mi
 800401c:	6833      	ldrmi	r3, [r6, #0]
 800401e:	3302      	addmi	r3, #2
 8004020:	6033      	strmi	r3, [r6, #0]
 8004022:	6825      	ldr	r5, [r4, #0]
 8004024:	f015 0506 	ands.w	r5, r5, #6
 8004028:	d106      	bne.n	8004038 <_printf_common+0x48>
 800402a:	f104 0a19 	add.w	sl, r4, #25
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	6832      	ldr	r2, [r6, #0]
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	42ab      	cmp	r3, r5
 8004036:	dc26      	bgt.n	8004086 <_printf_common+0x96>
 8004038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800403c:	1e13      	subs	r3, r2, #0
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	2301      	movne	r3, #1
 8004044:	0692      	lsls	r2, r2, #26
 8004046:	d42b      	bmi.n	80040a0 <_printf_common+0xb0>
 8004048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d01e      	beq.n	8004094 <_printf_common+0xa4>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	68e5      	ldr	r5, [r4, #12]
 800405a:	6832      	ldr	r2, [r6, #0]
 800405c:	f003 0306 	and.w	r3, r3, #6
 8004060:	2b04      	cmp	r3, #4
 8004062:	bf08      	it	eq
 8004064:	1aad      	subeq	r5, r5, r2
 8004066:	68a3      	ldr	r3, [r4, #8]
 8004068:	6922      	ldr	r2, [r4, #16]
 800406a:	bf0c      	ite	eq
 800406c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004070:	2500      	movne	r5, #0
 8004072:	4293      	cmp	r3, r2
 8004074:	bfc4      	itt	gt
 8004076:	1a9b      	subgt	r3, r3, r2
 8004078:	18ed      	addgt	r5, r5, r3
 800407a:	2600      	movs	r6, #0
 800407c:	341a      	adds	r4, #26
 800407e:	42b5      	cmp	r5, r6
 8004080:	d11a      	bne.n	80040b8 <_printf_common+0xc8>
 8004082:	2000      	movs	r0, #0
 8004084:	e008      	b.n	8004098 <_printf_common+0xa8>
 8004086:	2301      	movs	r3, #1
 8004088:	4652      	mov	r2, sl
 800408a:	4649      	mov	r1, r9
 800408c:	4638      	mov	r0, r7
 800408e:	47c0      	blx	r8
 8004090:	3001      	adds	r0, #1
 8004092:	d103      	bne.n	800409c <_printf_common+0xac>
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409c:	3501      	adds	r5, #1
 800409e:	e7c6      	b.n	800402e <_printf_common+0x3e>
 80040a0:	18e1      	adds	r1, r4, r3
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	2030      	movs	r0, #48	; 0x30
 80040a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040aa:	4422      	add	r2, r4
 80040ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b4:	3302      	adds	r3, #2
 80040b6:	e7c7      	b.n	8004048 <_printf_common+0x58>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4622      	mov	r2, r4
 80040bc:	4649      	mov	r1, r9
 80040be:	4638      	mov	r0, r7
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d0e6      	beq.n	8004094 <_printf_common+0xa4>
 80040c6:	3601      	adds	r6, #1
 80040c8:	e7d9      	b.n	800407e <_printf_common+0x8e>
	...

080040cc <_printf_i>:
 80040cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	460c      	mov	r4, r1
 80040d2:	4691      	mov	r9, r2
 80040d4:	7e27      	ldrb	r7, [r4, #24]
 80040d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040d8:	2f78      	cmp	r7, #120	; 0x78
 80040da:	4680      	mov	r8, r0
 80040dc:	469a      	mov	sl, r3
 80040de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e2:	d807      	bhi.n	80040f4 <_printf_i+0x28>
 80040e4:	2f62      	cmp	r7, #98	; 0x62
 80040e6:	d80a      	bhi.n	80040fe <_printf_i+0x32>
 80040e8:	2f00      	cmp	r7, #0
 80040ea:	f000 80d8 	beq.w	800429e <_printf_i+0x1d2>
 80040ee:	2f58      	cmp	r7, #88	; 0x58
 80040f0:	f000 80a3 	beq.w	800423a <_printf_i+0x16e>
 80040f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040fc:	e03a      	b.n	8004174 <_printf_i+0xa8>
 80040fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004102:	2b15      	cmp	r3, #21
 8004104:	d8f6      	bhi.n	80040f4 <_printf_i+0x28>
 8004106:	a001      	add	r0, pc, #4	; (adr r0, 800410c <_printf_i+0x40>)
 8004108:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800410c:	08004165 	.word	0x08004165
 8004110:	08004179 	.word	0x08004179
 8004114:	080040f5 	.word	0x080040f5
 8004118:	080040f5 	.word	0x080040f5
 800411c:	080040f5 	.word	0x080040f5
 8004120:	080040f5 	.word	0x080040f5
 8004124:	08004179 	.word	0x08004179
 8004128:	080040f5 	.word	0x080040f5
 800412c:	080040f5 	.word	0x080040f5
 8004130:	080040f5 	.word	0x080040f5
 8004134:	080040f5 	.word	0x080040f5
 8004138:	08004285 	.word	0x08004285
 800413c:	080041a9 	.word	0x080041a9
 8004140:	08004267 	.word	0x08004267
 8004144:	080040f5 	.word	0x080040f5
 8004148:	080040f5 	.word	0x080040f5
 800414c:	080042a7 	.word	0x080042a7
 8004150:	080040f5 	.word	0x080040f5
 8004154:	080041a9 	.word	0x080041a9
 8004158:	080040f5 	.word	0x080040f5
 800415c:	080040f5 	.word	0x080040f5
 8004160:	0800426f 	.word	0x0800426f
 8004164:	680b      	ldr	r3, [r1, #0]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	600a      	str	r2, [r1, #0]
 800416c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004174:	2301      	movs	r3, #1
 8004176:	e0a3      	b.n	80042c0 <_printf_i+0x1f4>
 8004178:	6825      	ldr	r5, [r4, #0]
 800417a:	6808      	ldr	r0, [r1, #0]
 800417c:	062e      	lsls	r6, r5, #24
 800417e:	f100 0304 	add.w	r3, r0, #4
 8004182:	d50a      	bpl.n	800419a <_printf_i+0xce>
 8004184:	6805      	ldr	r5, [r0, #0]
 8004186:	600b      	str	r3, [r1, #0]
 8004188:	2d00      	cmp	r5, #0
 800418a:	da03      	bge.n	8004194 <_printf_i+0xc8>
 800418c:	232d      	movs	r3, #45	; 0x2d
 800418e:	426d      	negs	r5, r5
 8004190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004194:	485e      	ldr	r0, [pc, #376]	; (8004310 <_printf_i+0x244>)
 8004196:	230a      	movs	r3, #10
 8004198:	e019      	b.n	80041ce <_printf_i+0x102>
 800419a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800419e:	6805      	ldr	r5, [r0, #0]
 80041a0:	600b      	str	r3, [r1, #0]
 80041a2:	bf18      	it	ne
 80041a4:	b22d      	sxthne	r5, r5
 80041a6:	e7ef      	b.n	8004188 <_printf_i+0xbc>
 80041a8:	680b      	ldr	r3, [r1, #0]
 80041aa:	6825      	ldr	r5, [r4, #0]
 80041ac:	1d18      	adds	r0, r3, #4
 80041ae:	6008      	str	r0, [r1, #0]
 80041b0:	0628      	lsls	r0, r5, #24
 80041b2:	d501      	bpl.n	80041b8 <_printf_i+0xec>
 80041b4:	681d      	ldr	r5, [r3, #0]
 80041b6:	e002      	b.n	80041be <_printf_i+0xf2>
 80041b8:	0669      	lsls	r1, r5, #25
 80041ba:	d5fb      	bpl.n	80041b4 <_printf_i+0xe8>
 80041bc:	881d      	ldrh	r5, [r3, #0]
 80041be:	4854      	ldr	r0, [pc, #336]	; (8004310 <_printf_i+0x244>)
 80041c0:	2f6f      	cmp	r7, #111	; 0x6f
 80041c2:	bf0c      	ite	eq
 80041c4:	2308      	moveq	r3, #8
 80041c6:	230a      	movne	r3, #10
 80041c8:	2100      	movs	r1, #0
 80041ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ce:	6866      	ldr	r6, [r4, #4]
 80041d0:	60a6      	str	r6, [r4, #8]
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	bfa2      	ittt	ge
 80041d6:	6821      	ldrge	r1, [r4, #0]
 80041d8:	f021 0104 	bicge.w	r1, r1, #4
 80041dc:	6021      	strge	r1, [r4, #0]
 80041de:	b90d      	cbnz	r5, 80041e4 <_printf_i+0x118>
 80041e0:	2e00      	cmp	r6, #0
 80041e2:	d04d      	beq.n	8004280 <_printf_i+0x1b4>
 80041e4:	4616      	mov	r6, r2
 80041e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80041ea:	fb03 5711 	mls	r7, r3, r1, r5
 80041ee:	5dc7      	ldrb	r7, [r0, r7]
 80041f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041f4:	462f      	mov	r7, r5
 80041f6:	42bb      	cmp	r3, r7
 80041f8:	460d      	mov	r5, r1
 80041fa:	d9f4      	bls.n	80041e6 <_printf_i+0x11a>
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d10b      	bne.n	8004218 <_printf_i+0x14c>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	07df      	lsls	r7, r3, #31
 8004204:	d508      	bpl.n	8004218 <_printf_i+0x14c>
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	6861      	ldr	r1, [r4, #4]
 800420a:	4299      	cmp	r1, r3
 800420c:	bfde      	ittt	le
 800420e:	2330      	movle	r3, #48	; 0x30
 8004210:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004214:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004218:	1b92      	subs	r2, r2, r6
 800421a:	6122      	str	r2, [r4, #16]
 800421c:	f8cd a000 	str.w	sl, [sp]
 8004220:	464b      	mov	r3, r9
 8004222:	aa03      	add	r2, sp, #12
 8004224:	4621      	mov	r1, r4
 8004226:	4640      	mov	r0, r8
 8004228:	f7ff fee2 	bl	8003ff0 <_printf_common>
 800422c:	3001      	adds	r0, #1
 800422e:	d14c      	bne.n	80042ca <_printf_i+0x1fe>
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	b004      	add	sp, #16
 8004236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423a:	4835      	ldr	r0, [pc, #212]	; (8004310 <_printf_i+0x244>)
 800423c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	680e      	ldr	r6, [r1, #0]
 8004244:	061f      	lsls	r7, r3, #24
 8004246:	f856 5b04 	ldr.w	r5, [r6], #4
 800424a:	600e      	str	r6, [r1, #0]
 800424c:	d514      	bpl.n	8004278 <_printf_i+0x1ac>
 800424e:	07d9      	lsls	r1, r3, #31
 8004250:	bf44      	itt	mi
 8004252:	f043 0320 	orrmi.w	r3, r3, #32
 8004256:	6023      	strmi	r3, [r4, #0]
 8004258:	b91d      	cbnz	r5, 8004262 <_printf_i+0x196>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	f023 0320 	bic.w	r3, r3, #32
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	2310      	movs	r3, #16
 8004264:	e7b0      	b.n	80041c8 <_printf_i+0xfc>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	f043 0320 	orr.w	r3, r3, #32
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	2378      	movs	r3, #120	; 0x78
 8004270:	4828      	ldr	r0, [pc, #160]	; (8004314 <_printf_i+0x248>)
 8004272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004276:	e7e3      	b.n	8004240 <_printf_i+0x174>
 8004278:	065e      	lsls	r6, r3, #25
 800427a:	bf48      	it	mi
 800427c:	b2ad      	uxthmi	r5, r5
 800427e:	e7e6      	b.n	800424e <_printf_i+0x182>
 8004280:	4616      	mov	r6, r2
 8004282:	e7bb      	b.n	80041fc <_printf_i+0x130>
 8004284:	680b      	ldr	r3, [r1, #0]
 8004286:	6826      	ldr	r6, [r4, #0]
 8004288:	6960      	ldr	r0, [r4, #20]
 800428a:	1d1d      	adds	r5, r3, #4
 800428c:	600d      	str	r5, [r1, #0]
 800428e:	0635      	lsls	r5, r6, #24
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	d501      	bpl.n	8004298 <_printf_i+0x1cc>
 8004294:	6018      	str	r0, [r3, #0]
 8004296:	e002      	b.n	800429e <_printf_i+0x1d2>
 8004298:	0671      	lsls	r1, r6, #25
 800429a:	d5fb      	bpl.n	8004294 <_printf_i+0x1c8>
 800429c:	8018      	strh	r0, [r3, #0]
 800429e:	2300      	movs	r3, #0
 80042a0:	6123      	str	r3, [r4, #16]
 80042a2:	4616      	mov	r6, r2
 80042a4:	e7ba      	b.n	800421c <_printf_i+0x150>
 80042a6:	680b      	ldr	r3, [r1, #0]
 80042a8:	1d1a      	adds	r2, r3, #4
 80042aa:	600a      	str	r2, [r1, #0]
 80042ac:	681e      	ldr	r6, [r3, #0]
 80042ae:	6862      	ldr	r2, [r4, #4]
 80042b0:	2100      	movs	r1, #0
 80042b2:	4630      	mov	r0, r6
 80042b4:	f7fb ffa4 	bl	8000200 <memchr>
 80042b8:	b108      	cbz	r0, 80042be <_printf_i+0x1f2>
 80042ba:	1b80      	subs	r0, r0, r6
 80042bc:	6060      	str	r0, [r4, #4]
 80042be:	6863      	ldr	r3, [r4, #4]
 80042c0:	6123      	str	r3, [r4, #16]
 80042c2:	2300      	movs	r3, #0
 80042c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c8:	e7a8      	b.n	800421c <_printf_i+0x150>
 80042ca:	6923      	ldr	r3, [r4, #16]
 80042cc:	4632      	mov	r2, r6
 80042ce:	4649      	mov	r1, r9
 80042d0:	4640      	mov	r0, r8
 80042d2:	47d0      	blx	sl
 80042d4:	3001      	adds	r0, #1
 80042d6:	d0ab      	beq.n	8004230 <_printf_i+0x164>
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	079b      	lsls	r3, r3, #30
 80042dc:	d413      	bmi.n	8004306 <_printf_i+0x23a>
 80042de:	68e0      	ldr	r0, [r4, #12]
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	4298      	cmp	r0, r3
 80042e4:	bfb8      	it	lt
 80042e6:	4618      	movlt	r0, r3
 80042e8:	e7a4      	b.n	8004234 <_printf_i+0x168>
 80042ea:	2301      	movs	r3, #1
 80042ec:	4632      	mov	r2, r6
 80042ee:	4649      	mov	r1, r9
 80042f0:	4640      	mov	r0, r8
 80042f2:	47d0      	blx	sl
 80042f4:	3001      	adds	r0, #1
 80042f6:	d09b      	beq.n	8004230 <_printf_i+0x164>
 80042f8:	3501      	adds	r5, #1
 80042fa:	68e3      	ldr	r3, [r4, #12]
 80042fc:	9903      	ldr	r1, [sp, #12]
 80042fe:	1a5b      	subs	r3, r3, r1
 8004300:	42ab      	cmp	r3, r5
 8004302:	dcf2      	bgt.n	80042ea <_printf_i+0x21e>
 8004304:	e7eb      	b.n	80042de <_printf_i+0x212>
 8004306:	2500      	movs	r5, #0
 8004308:	f104 0619 	add.w	r6, r4, #25
 800430c:	e7f5      	b.n	80042fa <_printf_i+0x22e>
 800430e:	bf00      	nop
 8004310:	080046d2 	.word	0x080046d2
 8004314:	080046e3 	.word	0x080046e3

08004318 <memcpy>:
 8004318:	440a      	add	r2, r1
 800431a:	4291      	cmp	r1, r2
 800431c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004320:	d100      	bne.n	8004324 <memcpy+0xc>
 8004322:	4770      	bx	lr
 8004324:	b510      	push	{r4, lr}
 8004326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800432a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800432e:	4291      	cmp	r1, r2
 8004330:	d1f9      	bne.n	8004326 <memcpy+0xe>
 8004332:	bd10      	pop	{r4, pc}

08004334 <memmove>:
 8004334:	4288      	cmp	r0, r1
 8004336:	b510      	push	{r4, lr}
 8004338:	eb01 0402 	add.w	r4, r1, r2
 800433c:	d902      	bls.n	8004344 <memmove+0x10>
 800433e:	4284      	cmp	r4, r0
 8004340:	4623      	mov	r3, r4
 8004342:	d807      	bhi.n	8004354 <memmove+0x20>
 8004344:	1e43      	subs	r3, r0, #1
 8004346:	42a1      	cmp	r1, r4
 8004348:	d008      	beq.n	800435c <memmove+0x28>
 800434a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800434e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004352:	e7f8      	b.n	8004346 <memmove+0x12>
 8004354:	4402      	add	r2, r0
 8004356:	4601      	mov	r1, r0
 8004358:	428a      	cmp	r2, r1
 800435a:	d100      	bne.n	800435e <memmove+0x2a>
 800435c:	bd10      	pop	{r4, pc}
 800435e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004366:	e7f7      	b.n	8004358 <memmove+0x24>

08004368 <_free_r>:
 8004368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800436a:	2900      	cmp	r1, #0
 800436c:	d048      	beq.n	8004400 <_free_r+0x98>
 800436e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004372:	9001      	str	r0, [sp, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f1a1 0404 	sub.w	r4, r1, #4
 800437a:	bfb8      	it	lt
 800437c:	18e4      	addlt	r4, r4, r3
 800437e:	f000 f8d3 	bl	8004528 <__malloc_lock>
 8004382:	4a20      	ldr	r2, [pc, #128]	; (8004404 <_free_r+0x9c>)
 8004384:	9801      	ldr	r0, [sp, #4]
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	4615      	mov	r5, r2
 800438a:	b933      	cbnz	r3, 800439a <_free_r+0x32>
 800438c:	6063      	str	r3, [r4, #4]
 800438e:	6014      	str	r4, [r2, #0]
 8004390:	b003      	add	sp, #12
 8004392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004396:	f000 b8cd 	b.w	8004534 <__malloc_unlock>
 800439a:	42a3      	cmp	r3, r4
 800439c:	d90b      	bls.n	80043b6 <_free_r+0x4e>
 800439e:	6821      	ldr	r1, [r4, #0]
 80043a0:	1862      	adds	r2, r4, r1
 80043a2:	4293      	cmp	r3, r2
 80043a4:	bf04      	itt	eq
 80043a6:	681a      	ldreq	r2, [r3, #0]
 80043a8:	685b      	ldreq	r3, [r3, #4]
 80043aa:	6063      	str	r3, [r4, #4]
 80043ac:	bf04      	itt	eq
 80043ae:	1852      	addeq	r2, r2, r1
 80043b0:	6022      	streq	r2, [r4, #0]
 80043b2:	602c      	str	r4, [r5, #0]
 80043b4:	e7ec      	b.n	8004390 <_free_r+0x28>
 80043b6:	461a      	mov	r2, r3
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	b10b      	cbz	r3, 80043c0 <_free_r+0x58>
 80043bc:	42a3      	cmp	r3, r4
 80043be:	d9fa      	bls.n	80043b6 <_free_r+0x4e>
 80043c0:	6811      	ldr	r1, [r2, #0]
 80043c2:	1855      	adds	r5, r2, r1
 80043c4:	42a5      	cmp	r5, r4
 80043c6:	d10b      	bne.n	80043e0 <_free_r+0x78>
 80043c8:	6824      	ldr	r4, [r4, #0]
 80043ca:	4421      	add	r1, r4
 80043cc:	1854      	adds	r4, r2, r1
 80043ce:	42a3      	cmp	r3, r4
 80043d0:	6011      	str	r1, [r2, #0]
 80043d2:	d1dd      	bne.n	8004390 <_free_r+0x28>
 80043d4:	681c      	ldr	r4, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	6053      	str	r3, [r2, #4]
 80043da:	4421      	add	r1, r4
 80043dc:	6011      	str	r1, [r2, #0]
 80043de:	e7d7      	b.n	8004390 <_free_r+0x28>
 80043e0:	d902      	bls.n	80043e8 <_free_r+0x80>
 80043e2:	230c      	movs	r3, #12
 80043e4:	6003      	str	r3, [r0, #0]
 80043e6:	e7d3      	b.n	8004390 <_free_r+0x28>
 80043e8:	6825      	ldr	r5, [r4, #0]
 80043ea:	1961      	adds	r1, r4, r5
 80043ec:	428b      	cmp	r3, r1
 80043ee:	bf04      	itt	eq
 80043f0:	6819      	ldreq	r1, [r3, #0]
 80043f2:	685b      	ldreq	r3, [r3, #4]
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	bf04      	itt	eq
 80043f8:	1949      	addeq	r1, r1, r5
 80043fa:	6021      	streq	r1, [r4, #0]
 80043fc:	6054      	str	r4, [r2, #4]
 80043fe:	e7c7      	b.n	8004390 <_free_r+0x28>
 8004400:	b003      	add	sp, #12
 8004402:	bd30      	pop	{r4, r5, pc}
 8004404:	200000a0 	.word	0x200000a0

08004408 <_malloc_r>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	1ccd      	adds	r5, r1, #3
 800440c:	f025 0503 	bic.w	r5, r5, #3
 8004410:	3508      	adds	r5, #8
 8004412:	2d0c      	cmp	r5, #12
 8004414:	bf38      	it	cc
 8004416:	250c      	movcc	r5, #12
 8004418:	2d00      	cmp	r5, #0
 800441a:	4606      	mov	r6, r0
 800441c:	db01      	blt.n	8004422 <_malloc_r+0x1a>
 800441e:	42a9      	cmp	r1, r5
 8004420:	d903      	bls.n	800442a <_malloc_r+0x22>
 8004422:	230c      	movs	r3, #12
 8004424:	6033      	str	r3, [r6, #0]
 8004426:	2000      	movs	r0, #0
 8004428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442a:	f000 f87d 	bl	8004528 <__malloc_lock>
 800442e:	4921      	ldr	r1, [pc, #132]	; (80044b4 <_malloc_r+0xac>)
 8004430:	680a      	ldr	r2, [r1, #0]
 8004432:	4614      	mov	r4, r2
 8004434:	b99c      	cbnz	r4, 800445e <_malloc_r+0x56>
 8004436:	4f20      	ldr	r7, [pc, #128]	; (80044b8 <_malloc_r+0xb0>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	b923      	cbnz	r3, 8004446 <_malloc_r+0x3e>
 800443c:	4621      	mov	r1, r4
 800443e:	4630      	mov	r0, r6
 8004440:	f000 f862 	bl	8004508 <_sbrk_r>
 8004444:	6038      	str	r0, [r7, #0]
 8004446:	4629      	mov	r1, r5
 8004448:	4630      	mov	r0, r6
 800444a:	f000 f85d 	bl	8004508 <_sbrk_r>
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	d123      	bne.n	800449a <_malloc_r+0x92>
 8004452:	230c      	movs	r3, #12
 8004454:	6033      	str	r3, [r6, #0]
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f86c 	bl	8004534 <__malloc_unlock>
 800445c:	e7e3      	b.n	8004426 <_malloc_r+0x1e>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	1b5b      	subs	r3, r3, r5
 8004462:	d417      	bmi.n	8004494 <_malloc_r+0x8c>
 8004464:	2b0b      	cmp	r3, #11
 8004466:	d903      	bls.n	8004470 <_malloc_r+0x68>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	441c      	add	r4, r3
 800446c:	6025      	str	r5, [r4, #0]
 800446e:	e004      	b.n	800447a <_malloc_r+0x72>
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	42a2      	cmp	r2, r4
 8004474:	bf0c      	ite	eq
 8004476:	600b      	streq	r3, [r1, #0]
 8004478:	6053      	strne	r3, [r2, #4]
 800447a:	4630      	mov	r0, r6
 800447c:	f000 f85a 	bl	8004534 <__malloc_unlock>
 8004480:	f104 000b 	add.w	r0, r4, #11
 8004484:	1d23      	adds	r3, r4, #4
 8004486:	f020 0007 	bic.w	r0, r0, #7
 800448a:	1ac2      	subs	r2, r0, r3
 800448c:	d0cc      	beq.n	8004428 <_malloc_r+0x20>
 800448e:	1a1b      	subs	r3, r3, r0
 8004490:	50a3      	str	r3, [r4, r2]
 8004492:	e7c9      	b.n	8004428 <_malloc_r+0x20>
 8004494:	4622      	mov	r2, r4
 8004496:	6864      	ldr	r4, [r4, #4]
 8004498:	e7cc      	b.n	8004434 <_malloc_r+0x2c>
 800449a:	1cc4      	adds	r4, r0, #3
 800449c:	f024 0403 	bic.w	r4, r4, #3
 80044a0:	42a0      	cmp	r0, r4
 80044a2:	d0e3      	beq.n	800446c <_malloc_r+0x64>
 80044a4:	1a21      	subs	r1, r4, r0
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 f82e 	bl	8004508 <_sbrk_r>
 80044ac:	3001      	adds	r0, #1
 80044ae:	d1dd      	bne.n	800446c <_malloc_r+0x64>
 80044b0:	e7cf      	b.n	8004452 <_malloc_r+0x4a>
 80044b2:	bf00      	nop
 80044b4:	200000a0 	.word	0x200000a0
 80044b8:	200000a4 	.word	0x200000a4

080044bc <_realloc_r>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	4607      	mov	r7, r0
 80044c0:	4614      	mov	r4, r2
 80044c2:	460e      	mov	r6, r1
 80044c4:	b921      	cbnz	r1, 80044d0 <_realloc_r+0x14>
 80044c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044ca:	4611      	mov	r1, r2
 80044cc:	f7ff bf9c 	b.w	8004408 <_malloc_r>
 80044d0:	b922      	cbnz	r2, 80044dc <_realloc_r+0x20>
 80044d2:	f7ff ff49 	bl	8004368 <_free_r>
 80044d6:	4625      	mov	r5, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044dc:	f000 f830 	bl	8004540 <_malloc_usable_size_r>
 80044e0:	42a0      	cmp	r0, r4
 80044e2:	d20f      	bcs.n	8004504 <_realloc_r+0x48>
 80044e4:	4621      	mov	r1, r4
 80044e6:	4638      	mov	r0, r7
 80044e8:	f7ff ff8e 	bl	8004408 <_malloc_r>
 80044ec:	4605      	mov	r5, r0
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d0f2      	beq.n	80044d8 <_realloc_r+0x1c>
 80044f2:	4631      	mov	r1, r6
 80044f4:	4622      	mov	r2, r4
 80044f6:	f7ff ff0f 	bl	8004318 <memcpy>
 80044fa:	4631      	mov	r1, r6
 80044fc:	4638      	mov	r0, r7
 80044fe:	f7ff ff33 	bl	8004368 <_free_r>
 8004502:	e7e9      	b.n	80044d8 <_realloc_r+0x1c>
 8004504:	4635      	mov	r5, r6
 8004506:	e7e7      	b.n	80044d8 <_realloc_r+0x1c>

08004508 <_sbrk_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4d06      	ldr	r5, [pc, #24]	; (8004524 <_sbrk_r+0x1c>)
 800450c:	2300      	movs	r3, #0
 800450e:	4604      	mov	r4, r0
 8004510:	4608      	mov	r0, r1
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f7fc fe54 	bl	80011c0 <_sbrk>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_sbrk_r+0x1a>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_sbrk_r+0x1a>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	2000020c 	.word	0x2000020c

08004528 <__malloc_lock>:
 8004528:	4801      	ldr	r0, [pc, #4]	; (8004530 <__malloc_lock+0x8>)
 800452a:	f000 b811 	b.w	8004550 <__retarget_lock_acquire_recursive>
 800452e:	bf00      	nop
 8004530:	20000214 	.word	0x20000214

08004534 <__malloc_unlock>:
 8004534:	4801      	ldr	r0, [pc, #4]	; (800453c <__malloc_unlock+0x8>)
 8004536:	f000 b80c 	b.w	8004552 <__retarget_lock_release_recursive>
 800453a:	bf00      	nop
 800453c:	20000214 	.word	0x20000214

08004540 <_malloc_usable_size_r>:
 8004540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004544:	1f18      	subs	r0, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	bfbc      	itt	lt
 800454a:	580b      	ldrlt	r3, [r1, r0]
 800454c:	18c0      	addlt	r0, r0, r3
 800454e:	4770      	bx	lr

08004550 <__retarget_lock_acquire_recursive>:
 8004550:	4770      	bx	lr

08004552 <__retarget_lock_release_recursive>:
 8004552:	4770      	bx	lr

08004554 <_init>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	bf00      	nop
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr

08004560 <_fini>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	bf00      	nop
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr
